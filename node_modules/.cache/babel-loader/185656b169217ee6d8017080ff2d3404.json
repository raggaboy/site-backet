{"ast":null,"code":"'use strict';\n\nvar merge = require('./functions/merge');\n\nvar requestBuilder = {\n  /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @return {object[]} The queries\n   */\n  _getQueries: function getQueries(index, state) {\n    var queries = []; // One query for the hits\n\n    queries.push({\n      indexName: index,\n      params: requestBuilder._getHitsSearchParams(state)\n    }); // One for each disjunctive facets\n\n    state.getRefinedDisjunctiveFacets().forEach(function (refinedFacet) {\n      queries.push({\n        indexName: index,\n        params: requestBuilder._getDisjunctiveFacetSearchParams(state, refinedFacet)\n      });\n    }); // maybe more to get the root level of hierarchical facets when activated\n\n    state.getRefinedHierarchicalFacets().forEach(function (refinedFacet) {\n      var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n      var currentRefinement = state.getHierarchicalRefinement(refinedFacet); // if we are deeper than level 0 (starting from `beer > IPA`)\n      // we want to get the root values\n\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n      if (currentRefinement.length > 0 && currentRefinement[0].split(separator).length > 1) {\n        queries.push({\n          indexName: index,\n          params: requestBuilder._getDisjunctiveFacetSearchParams(state, refinedFacet, true)\n        });\n      }\n    });\n    return queries;\n  },\n\n  /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @return {object.<string, any>}\n   */\n  _getHitsSearchParams: function (state) {\n    var facets = state.facets.concat(state.disjunctiveFacets).concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state));\n\n    var facetFilters = requestBuilder._getFacetFilters(state);\n\n    var numericFilters = requestBuilder._getNumericFilters(state);\n\n    var tagFilters = requestBuilder._getTagFilters(state);\n\n    var additionalParams = {\n      facets: facets.indexOf('*') > -1 ? ['*'] : facets,\n      tagFilters: tagFilters\n    };\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    return merge({}, state.getQueryParams(), additionalParams);\n  },\n\n  /**\n   * Build search parameters used to fetch a disjunctive facet\n   * @private\n   * @param  {string} facet the associated facet name\n   * @param  {boolean} hierarchicalRootLevel ?? FIXME\n   * @return {object}\n   */\n  _getDisjunctiveFacetSearchParams: function (state, facet, hierarchicalRootLevel) {\n    var facetFilters = requestBuilder._getFacetFilters(state, facet, hierarchicalRootLevel);\n\n    var numericFilters = requestBuilder._getNumericFilters(state, facet);\n\n    var tagFilters = requestBuilder._getTagFilters(state);\n\n    var additionalParams = {\n      hitsPerPage: 1,\n      page: 0,\n      attributesToRetrieve: [],\n      attributesToHighlight: [],\n      attributesToSnippet: [],\n      tagFilters: tagFilters,\n      analytics: false,\n      clickAnalytics: false\n    };\n    var hierarchicalFacet = state.getHierarchicalFacetByName(facet);\n\n    if (hierarchicalFacet) {\n      additionalParams.facets = requestBuilder._getDisjunctiveHierarchicalFacetAttribute(state, hierarchicalFacet, hierarchicalRootLevel);\n    } else {\n      additionalParams.facets = facet;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    return merge({}, state.getQueryParams(), additionalParams);\n  },\n\n  /**\n   * Return the numeric filters in an algolia request fashion\n   * @private\n   * @param {string} [facetName] the name of the attribute for which the filters should be excluded\n   * @return {string[]} the numeric filters in the algolia format\n   */\n  _getNumericFilters: function (state, facetName) {\n    if (state.numericFilters) {\n      return state.numericFilters;\n    }\n\n    var numericFilters = [];\n    Object.keys(state.numericRefinements).forEach(function (attribute) {\n      var operators = state.numericRefinements[attribute] || {};\n      Object.keys(operators).forEach(function (operator) {\n        var values = operators[operator] || [];\n\n        if (facetName !== attribute) {\n          values.forEach(function (value) {\n            if (Array.isArray(value)) {\n              var vs = value.map(function (v) {\n                return attribute + operator + v;\n              });\n              numericFilters.push(vs);\n            } else {\n              numericFilters.push(attribute + operator + value);\n            }\n          });\n        }\n      });\n    });\n    return numericFilters;\n  },\n\n  /**\n   * Return the tags filters depending\n   * @private\n   * @return {string}\n   */\n  _getTagFilters: function (state) {\n    if (state.tagFilters) {\n      return state.tagFilters;\n    }\n\n    return state.tagRefinements.join(',');\n  },\n\n  /**\n   * Build facetFilters parameter based on current refinements. The array returned\n   * contains strings representing the facet filters in the algolia format.\n   * @private\n   * @param  {string} [facet] if set, the current disjunctive facet\n   * @return {array.<string>}\n   */\n  _getFacetFilters: function (state, facet, hierarchicalRootLevel) {\n    var facetFilters = [];\n    var facetsRefinements = state.facetsRefinements || {};\n    Object.keys(facetsRefinements).forEach(function (facetName) {\n      var facetValues = facetsRefinements[facetName] || [];\n      facetValues.forEach(function (facetValue) {\n        facetFilters.push(facetName + ':' + facetValue);\n      });\n    });\n    var facetsExcludes = state.facetsExcludes || {};\n    Object.keys(facetsExcludes).forEach(function (facetName) {\n      var facetValues = facetsExcludes[facetName] || [];\n      facetValues.forEach(function (facetValue) {\n        facetFilters.push(facetName + ':-' + facetValue);\n      });\n    });\n    var disjunctiveFacetsRefinements = state.disjunctiveFacetsRefinements || {};\n    Object.keys(disjunctiveFacetsRefinements).forEach(function (facetName) {\n      var facetValues = disjunctiveFacetsRefinements[facetName] || [];\n\n      if (facetName === facet || !facetValues || facetValues.length === 0) {\n        return;\n      }\n\n      var orFilters = [];\n      facetValues.forEach(function (facetValue) {\n        orFilters.push(facetName + ':' + facetValue);\n      });\n      facetFilters.push(orFilters);\n    });\n    var hierarchicalFacetsRefinements = state.hierarchicalFacetsRefinements || {};\n    Object.keys(hierarchicalFacetsRefinements).forEach(function (facetName) {\n      var facetValues = hierarchicalFacetsRefinements[facetName] || [];\n      var facetValue = facetValues[0];\n\n      if (facetValue === undefined) {\n        return;\n      }\n\n      var hierarchicalFacet = state.getHierarchicalFacetByName(facetName);\n\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n\n      var attributeToRefine;\n      var attributesIndex; // we ask for parent facet values only when the `facet` is the current hierarchical facet\n\n      if (facet === facetName) {\n        // if we are at the root level already, no need to ask for facet values, we get them from\n        // the hits query\n        if (facetValue.indexOf(separator) === -1 || !rootPath && hierarchicalRootLevel === true || rootPath && rootPath.split(separator).length === facetValue.split(separator).length) {\n          return;\n        }\n\n        if (!rootPath) {\n          attributesIndex = facetValue.split(separator).length - 2;\n          facetValue = facetValue.slice(0, facetValue.lastIndexOf(separator));\n        } else {\n          attributesIndex = rootPath.split(separator).length - 1;\n          facetValue = rootPath;\n        }\n\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      } else {\n        attributesIndex = facetValue.split(separator).length - 1;\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      }\n\n      if (attributeToRefine) {\n        facetFilters.push([attributeToRefine + ':' + facetValue]);\n      }\n    });\n    return facetFilters;\n  },\n  _getHitsHierarchicalFacetsAttributes: function (state) {\n    var out = [];\n    return state.hierarchicalFacets.reduce( // ask for as much levels as there's hierarchical refinements\n    function getHitsAttributesForHierarchicalFacet(allAttributes, hierarchicalFacet) {\n      var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0]; // if no refinement, ask for root level\n\n      if (!hierarchicalRefinement) {\n        allAttributes.push(hierarchicalFacet.attributes[0]);\n        return allAttributes;\n      }\n\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n      var level = hierarchicalRefinement.split(separator).length;\n      var newAttributes = hierarchicalFacet.attributes.slice(0, level + 1);\n      return allAttributes.concat(newAttributes);\n    }, out);\n  },\n  _getDisjunctiveHierarchicalFacetAttribute: function (state, hierarchicalFacet, rootLevel) {\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n    if (rootLevel === true) {\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n\n      var attributeIndex = 0;\n\n      if (rootPath) {\n        attributeIndex = rootPath.split(separator).length;\n      }\n\n      return [hierarchicalFacet.attributes[attributeIndex]];\n    }\n\n    var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0] || ''; // if refinement is 'beers > IPA > Flying dog',\n    // then we want `facets: ['beers > IPA']` as disjunctive facet (parent level values)\n\n    var parentLevel = hierarchicalRefinement.split(separator).length - 1;\n    return hierarchicalFacet.attributes.slice(0, parentLevel + 1);\n  },\n  getSearchForFacetQuery: function (facetName, query, maxFacetHits, state) {\n    var stateForSearchForFacetValues = state.isDisjunctiveFacet(facetName) ? state.clearRefinements(facetName) : state;\n    var searchForFacetSearchParameters = {\n      facetQuery: query,\n      facetName: facetName\n    };\n\n    if (typeof maxFacetHits === 'number') {\n      searchForFacetSearchParameters.maxFacetHits = maxFacetHits;\n    }\n\n    return merge({}, requestBuilder._getHitsSearchParams(stateForSearchForFacetValues), searchForFacetSearchParameters);\n  }\n};\nmodule.exports = requestBuilder;","map":{"version":3,"names":["merge","require","requestBuilder","_getQueries","getQueries","index","state","queries","push","indexName","params","_getHitsSearchParams","getRefinedDisjunctiveFacets","forEach","refinedFacet","_getDisjunctiveFacetSearchParams","getRefinedHierarchicalFacets","hierarchicalFacet","getHierarchicalFacetByName","currentRefinement","getHierarchicalRefinement","separator","_getHierarchicalFacetSeparator","length","split","facets","concat","disjunctiveFacets","_getHitsHierarchicalFacetsAttributes","facetFilters","_getFacetFilters","numericFilters","_getNumericFilters","tagFilters","_getTagFilters","additionalParams","indexOf","getQueryParams","facet","hierarchicalRootLevel","hitsPerPage","page","attributesToRetrieve","attributesToHighlight","attributesToSnippet","analytics","clickAnalytics","_getDisjunctiveHierarchicalFacetAttribute","facetName","Object","keys","numericRefinements","attribute","operators","operator","values","value","Array","isArray","vs","map","v","tagRefinements","join","facetsRefinements","facetValues","facetValue","facetsExcludes","disjunctiveFacetsRefinements","orFilters","hierarchicalFacetsRefinements","undefined","rootPath","_getHierarchicalRootPath","attributeToRefine","attributesIndex","slice","lastIndexOf","attributes","out","hierarchicalFacets","reduce","getHitsAttributesForHierarchicalFacet","allAttributes","hierarchicalRefinement","name","level","newAttributes","rootLevel","attributeIndex","parentLevel","getSearchForFacetQuery","query","maxFacetHits","stateForSearchForFacetValues","isDisjunctiveFacet","clearRefinements","searchForFacetSearchParameters","facetQuery","module","exports"],"sources":["/home/dedm/Documents/sript/lab3-script/node_modules/algoliasearch-helper/src/requestBuilder.js"],"sourcesContent":["'use strict';\n\nvar merge = require('./functions/merge');\n\nvar requestBuilder = {\n  /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @return {object[]} The queries\n   */\n  _getQueries: function getQueries(index, state) {\n    var queries = [];\n\n    // One query for the hits\n    queries.push({\n      indexName: index,\n      params: requestBuilder._getHitsSearchParams(state)\n    });\n\n    // One for each disjunctive facets\n    state.getRefinedDisjunctiveFacets().forEach(function(refinedFacet) {\n      queries.push({\n        indexName: index,\n        params: requestBuilder._getDisjunctiveFacetSearchParams(state, refinedFacet)\n      });\n    });\n\n    // maybe more to get the root level of hierarchical facets when activated\n    state.getRefinedHierarchicalFacets().forEach(function(refinedFacet) {\n      var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n\n      var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n      // if we are deeper than level 0 (starting from `beer > IPA`)\n      // we want to get the root values\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n      if (currentRefinement.length > 0 && currentRefinement[0].split(separator).length > 1) {\n        queries.push({\n          indexName: index,\n          params: requestBuilder._getDisjunctiveFacetSearchParams(state, refinedFacet, true)\n        });\n      }\n    });\n\n    return queries;\n  },\n\n  /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @return {object.<string, any>}\n   */\n  _getHitsSearchParams: function(state) {\n    var facets = state.facets\n      .concat(state.disjunctiveFacets)\n      .concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state));\n\n\n    var facetFilters = requestBuilder._getFacetFilters(state);\n    var numericFilters = requestBuilder._getNumericFilters(state);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {\n      facets: facets.indexOf('*') > -1 ? ['*'] : facets,\n      tagFilters: tagFilters\n    };\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    return merge({}, state.getQueryParams(), additionalParams);\n  },\n\n  /**\n   * Build search parameters used to fetch a disjunctive facet\n   * @private\n   * @param  {string} facet the associated facet name\n   * @param  {boolean} hierarchicalRootLevel ?? FIXME\n   * @return {object}\n   */\n  _getDisjunctiveFacetSearchParams: function(state, facet, hierarchicalRootLevel) {\n    var facetFilters = requestBuilder._getFacetFilters(state, facet, hierarchicalRootLevel);\n    var numericFilters = requestBuilder._getNumericFilters(state, facet);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {\n      hitsPerPage: 1,\n      page: 0,\n      attributesToRetrieve: [],\n      attributesToHighlight: [],\n      attributesToSnippet: [],\n      tagFilters: tagFilters,\n      analytics: false,\n      clickAnalytics: false\n    };\n\n    var hierarchicalFacet = state.getHierarchicalFacetByName(facet);\n\n    if (hierarchicalFacet) {\n      additionalParams.facets = requestBuilder._getDisjunctiveHierarchicalFacetAttribute(\n        state,\n        hierarchicalFacet,\n        hierarchicalRootLevel\n      );\n    } else {\n      additionalParams.facets = facet;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    return merge({}, state.getQueryParams(), additionalParams);\n  },\n\n  /**\n   * Return the numeric filters in an algolia request fashion\n   * @private\n   * @param {string} [facetName] the name of the attribute for which the filters should be excluded\n   * @return {string[]} the numeric filters in the algolia format\n   */\n  _getNumericFilters: function(state, facetName) {\n    if (state.numericFilters) {\n      return state.numericFilters;\n    }\n\n    var numericFilters = [];\n\n    Object.keys(state.numericRefinements).forEach(function(attribute) {\n      var operators = state.numericRefinements[attribute] || {};\n      Object.keys(operators).forEach(function(operator) {\n        var values = operators[operator] || [];\n        if (facetName !== attribute) {\n          values.forEach(function(value) {\n            if (Array.isArray(value)) {\n              var vs = value.map(function(v) {\n                return attribute + operator + v;\n              });\n              numericFilters.push(vs);\n            } else {\n              numericFilters.push(attribute + operator + value);\n            }\n          });\n        }\n      });\n    });\n\n    return numericFilters;\n  },\n\n  /**\n   * Return the tags filters depending\n   * @private\n   * @return {string}\n   */\n  _getTagFilters: function(state) {\n    if (state.tagFilters) {\n      return state.tagFilters;\n    }\n\n    return state.tagRefinements.join(',');\n  },\n\n\n  /**\n   * Build facetFilters parameter based on current refinements. The array returned\n   * contains strings representing the facet filters in the algolia format.\n   * @private\n   * @param  {string} [facet] if set, the current disjunctive facet\n   * @return {array.<string>}\n   */\n  _getFacetFilters: function(state, facet, hierarchicalRootLevel) {\n    var facetFilters = [];\n\n    var facetsRefinements = state.facetsRefinements || {};\n    Object.keys(facetsRefinements).forEach(function(facetName) {\n      var facetValues = facetsRefinements[facetName] || [];\n      facetValues.forEach(function(facetValue) {\n        facetFilters.push(facetName + ':' + facetValue);\n      });\n    });\n\n    var facetsExcludes = state.facetsExcludes || {};\n    Object.keys(facetsExcludes).forEach(function(facetName) {\n      var facetValues = facetsExcludes[facetName] || [];\n      facetValues.forEach(function(facetValue) {\n        facetFilters.push(facetName + ':-' + facetValue);\n      });\n    });\n\n    var disjunctiveFacetsRefinements = state.disjunctiveFacetsRefinements || {};\n    Object.keys(disjunctiveFacetsRefinements).forEach(function(facetName) {\n      var facetValues = disjunctiveFacetsRefinements[facetName] || [];\n      if (facetName === facet || !facetValues || facetValues.length === 0) {\n        return;\n      }\n      var orFilters = [];\n\n      facetValues.forEach(function(facetValue) {\n        orFilters.push(facetName + ':' + facetValue);\n      });\n\n      facetFilters.push(orFilters);\n    });\n\n    var hierarchicalFacetsRefinements = state.hierarchicalFacetsRefinements || {};\n    Object.keys(hierarchicalFacetsRefinements).forEach(function(facetName) {\n      var facetValues = hierarchicalFacetsRefinements[facetName] || [];\n      var facetValue = facetValues[0];\n\n      if (facetValue === undefined) {\n        return;\n      }\n\n      var hierarchicalFacet = state.getHierarchicalFacetByName(facetName);\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeToRefine;\n      var attributesIndex;\n\n      // we ask for parent facet values only when the `facet` is the current hierarchical facet\n      if (facet === facetName) {\n        // if we are at the root level already, no need to ask for facet values, we get them from\n        // the hits query\n        if (facetValue.indexOf(separator) === -1 || (!rootPath && hierarchicalRootLevel === true) ||\n          (rootPath && rootPath.split(separator).length === facetValue.split(separator).length)) {\n          return;\n        }\n\n        if (!rootPath) {\n          attributesIndex = facetValue.split(separator).length - 2;\n          facetValue = facetValue.slice(0, facetValue.lastIndexOf(separator));\n        } else {\n          attributesIndex = rootPath.split(separator).length - 1;\n          facetValue = rootPath;\n        }\n\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      } else {\n        attributesIndex = facetValue.split(separator).length - 1;\n\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      }\n\n      if (attributeToRefine) {\n        facetFilters.push([attributeToRefine + ':' + facetValue]);\n      }\n    });\n\n    return facetFilters;\n  },\n\n  _getHitsHierarchicalFacetsAttributes: function(state) {\n    var out = [];\n\n    return state.hierarchicalFacets.reduce(\n      // ask for as much levels as there's hierarchical refinements\n      function getHitsAttributesForHierarchicalFacet(allAttributes, hierarchicalFacet) {\n        var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0];\n\n        // if no refinement, ask for root level\n        if (!hierarchicalRefinement) {\n          allAttributes.push(hierarchicalFacet.attributes[0]);\n          return allAttributes;\n        }\n\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var level = hierarchicalRefinement.split(separator).length;\n        var newAttributes = hierarchicalFacet.attributes.slice(0, level + 1);\n\n        return allAttributes.concat(newAttributes);\n      }, out);\n  },\n\n  _getDisjunctiveHierarchicalFacetAttribute: function(state, hierarchicalFacet, rootLevel) {\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    if (rootLevel === true) {\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeIndex = 0;\n\n      if (rootPath) {\n        attributeIndex = rootPath.split(separator).length;\n      }\n      return [hierarchicalFacet.attributes[attributeIndex]];\n    }\n\n    var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0] || '';\n    // if refinement is 'beers > IPA > Flying dog',\n    // then we want `facets: ['beers > IPA']` as disjunctive facet (parent level values)\n\n    var parentLevel = hierarchicalRefinement.split(separator).length - 1;\n    return hierarchicalFacet.attributes.slice(0, parentLevel + 1);\n  },\n\n  getSearchForFacetQuery: function(facetName, query, maxFacetHits, state) {\n    var stateForSearchForFacetValues = state.isDisjunctiveFacet(facetName) ?\n      state.clearRefinements(facetName) :\n      state;\n    var searchForFacetSearchParameters = {\n      facetQuery: query,\n      facetName: facetName\n    };\n    if (typeof maxFacetHits === 'number') {\n      searchForFacetSearchParameters.maxFacetHits = maxFacetHits;\n    }\n    return merge(\n      {},\n      requestBuilder._getHitsSearchParams(stateForSearchForFacetValues),\n      searchForFacetSearchParameters\n    );\n  }\n};\n\nmodule.exports = requestBuilder;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}