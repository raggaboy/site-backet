{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport PropTypes from 'prop-types';\nimport createConnector from \"../core/createConnector.js\";\nimport { cleanUpValue, refineValue, getCurrentRefinementValue } from \"../core/indexUtils.js\";\n\nfunction getId() {\n  return 'sortBy';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId(props);\n  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, null);\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n\n  return null;\n}\n/**\n * The connectSortBy connector provides the logic to build a widget that will\n *  display a list of indices. This allows a user to change how the hits are being sorted.\n * @name connectSortBy\n * @requirements Algolia handles sorting by creating replica indices. [Read more about sorting](https://www.algolia.com/doc/guides/relevance/sorting/) on\n * the Algolia website.\n * @kind connector\n * @propType {string} defaultRefinement - The default selected index.\n * @propType {{value: string, label: string}[]} items - The list of indexes to search in.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string[]} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{isRefined: boolean, label?: string, value: string}>} items - the list of items the HitsPerPage can display.  If no label provided, the value will be displayed.\n */\n\n\nexport default createConnector({\n  displayName: 'AlgoliaSortBy',\n  $$type: 'ais.sortBy',\n  propTypes: {\n    defaultRefinement: PropTypes.string,\n    items: PropTypes.arrayOf(PropTypes.shape({\n      label: PropTypes.string,\n      value: PropTypes.string.isRequired\n    })).isRequired,\n    transformItems: PropTypes.func\n  },\n  getProvidedProps: function getProvidedProps(props, searchState) {\n    var currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    var items = props.items.map(function (item) {\n      return item.value === currentRefinement ? _objectSpread(_objectSpread({}, item), {}, {\n        isRefined: true\n      }) : _objectSpread(_objectSpread({}, item), {}, {\n        isRefined: false\n      });\n    });\n    return {\n      items: props.transformItems ? props.transformItems(items) : items,\n      currentRefinement: currentRefinement\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    var id = getId();\n\n    var nextValue = _defineProperty({}, id, nextRefinement);\n\n    var resetPage = true;\n    return refineValue(searchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }, resetPage);\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return cleanUpValue(searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }, getId());\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    var selectedIndex = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    return searchParameters.setIndex(selectedIndex);\n  },\n  getMetadata: function getMetadata() {\n    return {\n      id: getId()\n    };\n  }\n});","map":{"version":3,"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","PropTypes","createConnector","cleanUpValue","refineValue","getCurrentRefinementValue","getId","getCurrentRefinement","props","searchState","context","id","currentRefinement","displayName","$$type","propTypes","defaultRefinement","string","items","arrayOf","shape","label","value","isRequired","transformItems","func","getProvidedProps","ais","contextValue","multiIndexContext","indexContextValue","map","item","isRefined","refine","nextRefinement","nextValue","resetPage","cleanUp","getSearchParameters","searchParameters","selectedIndex","setIndex","getMetadata"],"sources":["/home/dedm/Documents/sript/lab3-script/node_modules/react-instantsearch-core/dist/es/connectors/connectSortBy.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport PropTypes from 'prop-types';\nimport createConnector from \"../core/createConnector.js\";\nimport { cleanUpValue, refineValue, getCurrentRefinementValue } from \"../core/indexUtils.js\";\n\nfunction getId() {\n  return 'sortBy';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId(props);\n  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, null);\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n\n  return null;\n}\n/**\n * The connectSortBy connector provides the logic to build a widget that will\n *  display a list of indices. This allows a user to change how the hits are being sorted.\n * @name connectSortBy\n * @requirements Algolia handles sorting by creating replica indices. [Read more about sorting](https://www.algolia.com/doc/guides/relevance/sorting/) on\n * the Algolia website.\n * @kind connector\n * @propType {string} defaultRefinement - The default selected index.\n * @propType {{value: string, label: string}[]} items - The list of indexes to search in.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string[]} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{isRefined: boolean, label?: string, value: string}>} items - the list of items the HitsPerPage can display.  If no label provided, the value will be displayed.\n */\n\n\nexport default createConnector({\n  displayName: 'AlgoliaSortBy',\n  $$type: 'ais.sortBy',\n  propTypes: {\n    defaultRefinement: PropTypes.string,\n    items: PropTypes.arrayOf(PropTypes.shape({\n      label: PropTypes.string,\n      value: PropTypes.string.isRequired\n    })).isRequired,\n    transformItems: PropTypes.func\n  },\n  getProvidedProps: function getProvidedProps(props, searchState) {\n    var currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    var items = props.items.map(function (item) {\n      return item.value === currentRefinement ? _objectSpread(_objectSpread({}, item), {}, {\n        isRefined: true\n      }) : _objectSpread(_objectSpread({}, item), {}, {\n        isRefined: false\n      });\n    });\n    return {\n      items: props.transformItems ? props.transformItems(items) : items,\n      currentRefinement: currentRefinement\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    var id = getId();\n\n    var nextValue = _defineProperty({}, id, nextRefinement);\n\n    var resetPage = true;\n    return refineValue(searchState, nextValue, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }, resetPage);\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return cleanUpValue(searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }, getId());\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    var selectedIndex = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    return searchParameters.setIndex(selectedIndex);\n  },\n  getMetadata: function getMetadata() {\n    return {\n      id: getId()\n    };\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}