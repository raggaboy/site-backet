{"ast":null,"code":"'use strict';\n\nvar merge = require('../functions/merge');\n\nvar defaultsPure = require('../functions/defaultsPure');\n\nvar intersection = require('../functions/intersection');\n\nvar find = require('../functions/find');\n\nvar valToNumber = require('../functions/valToNumber');\n\nvar omit = require('../functions/omit');\n\nvar objectHasKeys = require('../functions/objectHasKeys');\n\nvar isValidUserToken = require('../utils/isValidUserToken');\n\nvar RefinementList = require('./RefinementList');\n/**\n * isEqual, but only for numeric refinement values, possible values:\n * - 5\n * - [5]\n * - [[5]]\n * - [[5,5],[4]]\n */\n\n\nfunction isEqualNumericRefinement(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return a.length === b.length && a.every(function (el, i) {\n      return isEqualNumericRefinement(b[i], el);\n    });\n  }\n\n  return a === b;\n}\n/**\n * like _.find but using deep equality to be able to use it\n * to find arrays.\n * @private\n * @param {any[]} array array to search into (elements are base or array of base)\n * @param {any} searchedValue the value we're looking for (base or array of base)\n * @return {any} the searched value or undefined\n */\n\n\nfunction findArray(array, searchedValue) {\n  return find(array, function (currentValue) {\n    return isEqualNumericRefinement(currentValue, searchedValue);\n  });\n}\n/**\n * The facet list is the structure used to store the list of values used to\n * filter a single attribute.\n * @typedef {string[]} SearchParameters.FacetList\n */\n\n/**\n * Structure to store numeric filters with the operator as the key. The supported operators\n * are `=`, `>`, `<`, `>=`, `<=` and `!=`.\n * @typedef {Object.<string, Array.<number|number[]>>} SearchParameters.OperatorList\n */\n\n/**\n * SearchParameters is the data structure that contains all the information\n * usable for making a search to Algolia API. It doesn't do the search itself,\n * nor does it contains logic about the parameters.\n * It is an immutable object, therefore it has been created in a way that each\n * changes does not change the object itself but returns a copy with the\n * modification.\n * This object should probably not be instantiated outside of the helper. It will\n * be provided when needed. This object is documented for reference as you'll\n * get it from events generated by the {@link AlgoliaSearchHelper}.\n * If need be, instantiate the Helper from the factory function {@link SearchParameters.make}\n * @constructor\n * @classdesc contains all the parameters of a search\n * @param {object|SearchParameters} newParameters existing parameters or partial object\n * for the properties of a new SearchParameters\n * @see SearchParameters.make\n * @example <caption>SearchParameters of the first query in\n *   <a href=\"http://demos.algolia.com/instant-search-demo/\">the instant search demo</a></caption>\n{\n   \"query\": \"\",\n   \"disjunctiveFacets\": [\n      \"customerReviewCount\",\n      \"category\",\n      \"salePrice_range\",\n      \"manufacturer\"\n  ],\n   \"maxValuesPerFacet\": 30,\n   \"page\": 0,\n   \"hitsPerPage\": 10,\n   \"facets\": [\n      \"type\",\n      \"shipping\"\n  ]\n}\n */\n\n\nfunction SearchParameters(newParameters) {\n  var params = newParameters ? SearchParameters._parseNumbers(newParameters) : {};\n\n  if (params.userToken !== undefined && !isValidUserToken(params.userToken)) {\n    console.warn('[algoliasearch-helper] The `userToken` parameter is invalid. This can lead to wrong analytics.\\n  - Format: [a-zA-Z0-9_-]{1,64}');\n  }\n  /**\n   * This attribute contains the list of all the conjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n\n\n  this.facets = params.facets || [];\n  /**\n   * This attribute contains the list of all the disjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n\n  this.disjunctiveFacets = params.disjunctiveFacets || [];\n  /**\n   * This attribute contains the list of all the hierarchical facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * Hierarchical facets are a sub type of disjunctive facets that\n   * let you filter faceted attributes hierarchically.\n   * @member {string[]|object[]}\n   */\n\n  this.hierarchicalFacets = params.hierarchicalFacets || []; // Refinements\n\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n\n  this.facetsRefinements = params.facetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * excluded from the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters excluded for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n\n  this.facetsExcludes = params.facetsExcludes || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the disjunctive facets. Each facet must be properly\n   * defined in the `disjunctiveFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n\n  this.disjunctiveFacetsRefinements = params.disjunctiveFacetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the numeric attributes.\n   *\n   * The key is the name of the attribute, and the value is the\n   * filters to apply to this attribute.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `numericFilters` attribute.\n   * @member {Object.<string, SearchParameters.OperatorList>}\n   */\n\n  this.numericRefinements = params.numericRefinements || {};\n  /**\n   * This attribute contains all the tags used to refine the query.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `tagFilters` attribute.\n   * @member {string[]}\n   */\n\n  this.tagRefinements = params.tagRefinements || [];\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the hierarchical facets. Each facet must be properly\n   * defined in the `hierarchicalFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name. The FacetList values\n   * are structured as a string that contain the values for each level\n   * separated by the configured separator.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n\n  this.hierarchicalFacetsRefinements = params.hierarchicalFacetsRefinements || {};\n  var self = this;\n  Object.keys(params).forEach(function (paramName) {\n    var isKeyKnown = SearchParameters.PARAMETERS.indexOf(paramName) !== -1;\n    var isValueDefined = params[paramName] !== undefined;\n\n    if (!isKeyKnown && isValueDefined) {\n      self[paramName] = params[paramName];\n    }\n  });\n}\n/**\n * List all the properties in SearchParameters and therefore all the known Algolia properties\n * This doesn't contain any beta/hidden features.\n * @private\n */\n\n\nSearchParameters.PARAMETERS = Object.keys(new SearchParameters());\n/**\n * @private\n * @param {object} partialState full or part of a state\n * @return {object} a new object with the number keys as number\n */\n\nSearchParameters._parseNumbers = function (partialState) {\n  // Do not reparse numbers in SearchParameters, they ought to be parsed already\n  if (partialState instanceof SearchParameters) return partialState;\n  var numbers = {};\n  var numberKeys = ['aroundPrecision', 'aroundRadius', 'getRankingInfo', 'minWordSizefor2Typos', 'minWordSizefor1Typo', 'page', 'maxValuesPerFacet', 'distinct', 'minimumAroundRadius', 'hitsPerPage', 'minProximity'];\n  numberKeys.forEach(function (k) {\n    var value = partialState[k];\n\n    if (typeof value === 'string') {\n      var parsedValue = parseFloat(value); // global isNaN is ok to use here, value is only number or NaN\n\n      numbers[k] = isNaN(parsedValue) ? value : parsedValue;\n    }\n  }); // there's two formats of insideBoundingBox, we need to parse\n  // the one which is an array of float geo rectangles\n\n  if (Array.isArray(partialState.insideBoundingBox)) {\n    numbers.insideBoundingBox = partialState.insideBoundingBox.map(function (geoRect) {\n      if (Array.isArray(geoRect)) {\n        return geoRect.map(function (value) {\n          return parseFloat(value);\n        });\n      }\n\n      return geoRect;\n    });\n  }\n\n  if (partialState.numericRefinements) {\n    var numericRefinements = {};\n    Object.keys(partialState.numericRefinements).forEach(function (attribute) {\n      var operators = partialState.numericRefinements[attribute] || {};\n      numericRefinements[attribute] = {};\n      Object.keys(operators).forEach(function (operator) {\n        var values = operators[operator];\n        var parsedValues = values.map(function (v) {\n          if (Array.isArray(v)) {\n            return v.map(function (vPrime) {\n              if (typeof vPrime === 'string') {\n                return parseFloat(vPrime);\n              }\n\n              return vPrime;\n            });\n          } else if (typeof v === 'string') {\n            return parseFloat(v);\n          }\n\n          return v;\n        });\n        numericRefinements[attribute][operator] = parsedValues;\n      });\n    });\n    numbers.numericRefinements = numericRefinements;\n  }\n\n  return merge({}, partialState, numbers);\n};\n/**\n * Factory for SearchParameters\n * @param {object|SearchParameters} newParameters existing parameters or partial\n * object for the properties of a new SearchParameters\n * @return {SearchParameters} frozen instance of SearchParameters\n */\n\n\nSearchParameters.make = function makeSearchParameters(newParameters) {\n  var instance = new SearchParameters(newParameters);\n  var hierarchicalFacets = newParameters.hierarchicalFacets || [];\n  hierarchicalFacets.forEach(function (facet) {\n    if (facet.rootPath) {\n      var currentRefinement = instance.getHierarchicalRefinement(facet.name);\n\n      if (currentRefinement.length > 0 && currentRefinement[0].indexOf(facet.rootPath) !== 0) {\n        instance = instance.clearRefinements(facet.name);\n      } // get it again in case it has been cleared\n\n\n      currentRefinement = instance.getHierarchicalRefinement(facet.name);\n\n      if (currentRefinement.length === 0) {\n        instance = instance.toggleHierarchicalFacetRefinement(facet.name, facet.rootPath);\n      }\n    }\n  });\n  return instance;\n};\n/**\n * Validates the new parameters based on the previous state\n * @param {SearchParameters} currentState the current state\n * @param {object|SearchParameters} parameters the new parameters to set\n * @return {Error|null} Error if the modification is invalid, null otherwise\n */\n\n\nSearchParameters.validate = function (currentState, parameters) {\n  var params = parameters || {};\n\n  if (currentState.tagFilters && params.tagRefinements && params.tagRefinements.length > 0) {\n    return new Error('[Tags] Cannot switch from the managed tag API to the advanced API. It is probably ' + 'an error, if it is really what you want, you should first clear the tags with clearTags method.');\n  }\n\n  if (currentState.tagRefinements.length > 0 && params.tagFilters) {\n    return new Error('[Tags] Cannot switch from the advanced tag API to the managed API. It is probably ' + 'an error, if it is not, you should first clear the tags with clearTags method.');\n  }\n\n  if (currentState.numericFilters && params.numericRefinements && objectHasKeys(params.numericRefinements)) {\n    return new Error(\"[Numeric filters] Can't switch from the advanced to the managed API. It\" + ' is probably an error, if this is really what you want, you have to first' + ' clear the numeric filters.');\n  }\n\n  if (objectHasKeys(currentState.numericRefinements) && params.numericFilters) {\n    return new Error(\"[Numeric filters] Can't switch from the managed API to the advanced. It\" + ' is probably an error, if this is really what you want, you have to first' + ' clear the numeric filters.');\n  }\n\n  return null;\n};\n\nSearchParameters.prototype = {\n  constructor: SearchParameters,\n\n  /**\n   * Remove all refinements (disjunctive + conjunctive + excludes + numeric filters)\n   * @method\n   * @param {undefined|string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {SearchParameters}\n   */\n  clearRefinements: function clearRefinements(attribute) {\n    var patch = {\n      numericRefinements: this._clearNumericRefinements(attribute),\n      facetsRefinements: RefinementList.clearRefinement(this.facetsRefinements, attribute, 'conjunctiveFacet'),\n      facetsExcludes: RefinementList.clearRefinement(this.facetsExcludes, attribute, 'exclude'),\n      disjunctiveFacetsRefinements: RefinementList.clearRefinement(this.disjunctiveFacetsRefinements, attribute, 'disjunctiveFacet'),\n      hierarchicalFacetsRefinements: RefinementList.clearRefinement(this.hierarchicalFacetsRefinements, attribute, 'hierarchicalFacet')\n    };\n\n    if (patch.numericRefinements === this.numericRefinements && patch.facetsRefinements === this.facetsRefinements && patch.facetsExcludes === this.facetsExcludes && patch.disjunctiveFacetsRefinements === this.disjunctiveFacetsRefinements && patch.hierarchicalFacetsRefinements === this.hierarchicalFacetsRefinements) {\n      return this;\n    }\n\n    return this.setQueryParameters(patch);\n  },\n\n  /**\n   * Remove all the refined tags from the SearchParameters\n   * @method\n   * @return {SearchParameters}\n   */\n  clearTags: function clearTags() {\n    if (this.tagFilters === undefined && this.tagRefinements.length === 0) return this;\n    return this.setQueryParameters({\n      tagFilters: undefined,\n      tagRefinements: []\n    });\n  },\n\n  /**\n   * Set the index.\n   * @method\n   * @param {string} index the index name\n   * @return {SearchParameters}\n   */\n  setIndex: function setIndex(index) {\n    if (index === this.index) return this;\n    return this.setQueryParameters({\n      index: index\n    });\n  },\n\n  /**\n   * Query setter\n   * @method\n   * @param {string} newQuery value for the new query\n   * @return {SearchParameters}\n   */\n  setQuery: function setQuery(newQuery) {\n    if (newQuery === this.query) return this;\n    return this.setQueryParameters({\n      query: newQuery\n    });\n  },\n\n  /**\n   * Page setter\n   * @method\n   * @param {number} newPage new page number\n   * @return {SearchParameters}\n   */\n  setPage: function setPage(newPage) {\n    if (newPage === this.page) return this;\n    return this.setQueryParameters({\n      page: newPage\n    });\n  },\n\n  /**\n   * Facets setter\n   * The facets are the simple facets, used for conjunctive (and) faceting.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for conjunctive faceting\n   * @return {SearchParameters}\n   */\n  setFacets: function setFacets(facets) {\n    return this.setQueryParameters({\n      facets: facets\n    });\n  },\n\n  /**\n   * Disjunctive facets setter\n   * Change the list of disjunctive (or) facets the helper chan handle.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for disjunctive faceting\n   * @return {SearchParameters}\n   */\n  setDisjunctiveFacets: function setDisjunctiveFacets(facets) {\n    return this.setQueryParameters({\n      disjunctiveFacets: facets\n    });\n  },\n\n  /**\n   * HitsPerPage setter\n   * Hits per page represents the number of hits retrieved for this query\n   * @method\n   * @param {number} n number of hits retrieved per page of results\n   * @return {SearchParameters}\n   */\n  setHitsPerPage: function setHitsPerPage(n) {\n    if (this.hitsPerPage === n) return this;\n    return this.setQueryParameters({\n      hitsPerPage: n\n    });\n  },\n\n  /**\n   * typoTolerance setter\n   * Set the value of typoTolerance\n   * @method\n   * @param {string} typoTolerance new value of typoTolerance (\"true\", \"false\", \"min\" or \"strict\")\n   * @return {SearchParameters}\n   */\n  setTypoTolerance: function setTypoTolerance(typoTolerance) {\n    if (this.typoTolerance === typoTolerance) return this;\n    return this.setQueryParameters({\n      typoTolerance: typoTolerance\n    });\n  },\n\n  /**\n   * Add a numeric filter for a given attribute\n   * When value is an array, they are combined with OR\n   * When value is a single value, it will combined with AND\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} operator operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number | number[]} value value of the filter\n   * @return {SearchParameters}\n   * @example\n   * // for price = 50 or 40\n   * searchparameter.addNumericRefinement('price', '=', [50, 40]);\n   * @example\n   * // for size = 38 and 40\n   * searchparameter.addNumericRefinement('size', '=', 38);\n   * searchparameter.addNumericRefinement('size', '=', 40);\n   */\n  addNumericRefinement: function (attribute, operator, v) {\n    var value = valToNumber(v);\n    if (this.isNumericRefined(attribute, operator, value)) return this;\n    var mod = merge({}, this.numericRefinements);\n    mod[attribute] = merge({}, mod[attribute]);\n\n    if (mod[attribute][operator]) {\n      // Array copy\n      mod[attribute][operator] = mod[attribute][operator].slice(); // Add the element. Concat can't be used here because value can be an array.\n\n      mod[attribute][operator].push(value);\n    } else {\n      mod[attribute][operator] = [value];\n    }\n\n    return this.setQueryParameters({\n      numericRefinements: mod\n    });\n  },\n\n  /**\n   * Get the list of conjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getConjunctiveRefinements: function (facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n\n    return this.facetsRefinements[facetName] || [];\n  },\n\n  /**\n   * Get the list of disjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getDisjunctiveRefinements: function (facetName) {\n    if (!this.isDisjunctiveFacet(facetName)) {\n      return [];\n    }\n\n    return this.disjunctiveFacetsRefinements[facetName] || [];\n  },\n\n  /**\n   * Get the list of hierarchical refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getHierarchicalRefinement: function (facetName) {\n    // we send an array but we currently do not support multiple\n    // hierarchicalRefinements for a hierarchicalFacet\n    return this.hierarchicalFacetsRefinements[facetName] || [];\n  },\n\n  /**\n   * Get the list of exclude refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getExcludeRefinements: function (facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n\n    return this.facetsExcludes[facetName] || [];\n  },\n\n  /**\n   * Remove all the numeric filter for a given (attribute, operator)\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} [operator] operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number} [number] the value to be removed\n   * @return {SearchParameters}\n   */\n  removeNumericRefinement: function (attribute, operator, paramValue) {\n    if (paramValue !== undefined) {\n      if (!this.isNumericRefined(attribute, operator, paramValue)) {\n        return this;\n      }\n\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function (value, key) {\n          return key === attribute && value.op === operator && isEqualNumericRefinement(value.val, valToNumber(paramValue));\n        })\n      });\n    } else if (operator !== undefined) {\n      if (!this.isNumericRefined(attribute, operator)) return this;\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function (value, key) {\n          return key === attribute && value.op === operator;\n        })\n      });\n    }\n\n    if (!this.isNumericRefined(attribute)) return this;\n    return this.setQueryParameters({\n      numericRefinements: this._clearNumericRefinements(function (value, key) {\n        return key === attribute;\n      })\n    });\n  },\n\n  /**\n   * Get the list of numeric refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {SearchParameters.OperatorList} list of refinements\n   */\n  getNumericRefinements: function (facetName) {\n    return this.numericRefinements[facetName] || {};\n  },\n\n  /**\n   * Return the current refinement for the (attribute, operator)\n   * @param {string} attribute attribute in the record\n   * @param {string} operator operator applied on the refined values\n   * @return {Array.<number|number[]>} refined values\n   */\n  getNumericRefinement: function (attribute, operator) {\n    return this.numericRefinements[attribute] && this.numericRefinements[attribute][operator];\n  },\n\n  /**\n   * Clear numeric filters.\n   * @method\n   * @private\n   * @param {string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {Object.<string, OperatorList>}\n   */\n  _clearNumericRefinements: function _clearNumericRefinements(attribute) {\n    if (attribute === undefined) {\n      if (!objectHasKeys(this.numericRefinements)) {\n        return this.numericRefinements;\n      }\n\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(this.numericRefinements, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n      var numericRefinements = this.numericRefinements;\n      var newNumericRefinements = Object.keys(numericRefinements).reduce(function (memo, key) {\n        var operators = numericRefinements[key];\n        var operatorList = {};\n        operators = operators || {};\n        Object.keys(operators).forEach(function (operator) {\n          var values = operators[operator] || [];\n          var outValues = [];\n          values.forEach(function (value) {\n            var predicateResult = attribute({\n              val: value,\n              op: operator\n            }, key, 'numeric');\n            if (!predicateResult) outValues.push(value);\n          });\n\n          if (outValues.length !== values.length) {\n            hasChanged = true;\n          }\n\n          operatorList[operator] = outValues;\n        });\n        memo[key] = operatorList;\n        return memo;\n      }, {});\n      if (hasChanged) return newNumericRefinements;\n      return this.numericRefinements;\n    }\n  },\n\n  /**\n   * Add a facet to the facets attribute of the helper configuration, if it\n   * isn't already present.\n   * @method\n   * @param {string} facet facet name to add\n   * @return {SearchParameters}\n   */\n  addFacet: function addFacet(facet) {\n    if (this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.setQueryParameters({\n      facets: this.facets.concat([facet])\n    });\n  },\n\n  /**\n   * Add a disjunctive facet to the disjunctiveFacets attribute of the helper\n   * configuration, if it isn't already present.\n   * @method\n   * @param {string} facet disjunctive facet name to add\n   * @return {SearchParameters}\n   */\n  addDisjunctiveFacet: function addDisjunctiveFacet(facet) {\n    if (this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.concat([facet])\n    });\n  },\n\n  /**\n   * Add a hierarchical facet to the hierarchicalFacets attribute of the helper\n   * configuration.\n   * @method\n   * @param {object} hierarchicalFacet hierarchical facet to add\n   * @return {SearchParameters}\n   * @throws will throw an error if a hierarchical facet with the same name was already declared\n   */\n  addHierarchicalFacet: function addHierarchicalFacet(hierarchicalFacet) {\n    if (this.isHierarchicalFacet(hierarchicalFacet.name)) {\n      throw new Error('Cannot declare two hierarchical facets with the same name: `' + hierarchicalFacet.name + '`');\n    }\n\n    return this.setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.concat([hierarchicalFacet])\n    });\n  },\n\n  /**\n   * Add a refinement on a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters}\n   */\n  addFacetRefinement: function addFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n\n    if (RefinementList.isRefined(this.facetsRefinements, facet, value)) return this;\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.addRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n\n  /**\n   * Exclude a value from a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the exclusion on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters}\n   */\n  addExcludeRefinement: function addExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n\n    if (RefinementList.isRefined(this.facetsExcludes, facet, value)) return this;\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.addRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n\n  /**\n   * Adds a refinement on a disjunctive facet.\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters}\n   */\n  addDisjunctiveFacetRefinement: function addDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n\n    if (RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)) return this;\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.addRefinement(this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n\n  /**\n   * addTagRefinement adds a tag to the list used to filter the results\n   * @param {string} tag tag to be added\n   * @return {SearchParameters}\n   */\n  addTagRefinement: function addTagRefinement(tag) {\n    if (this.isTagRefined(tag)) return this;\n    var modification = {\n      tagRefinements: this.tagRefinements.concat(tag)\n    };\n    return this.setQueryParameters(modification);\n  },\n\n  /**\n   * Remove a facet from the facets attribute of the helper configuration, if it\n   * is present.\n   * @method\n   * @param {string} facet facet name to remove\n   * @return {SearchParameters}\n   */\n  removeFacet: function removeFacet(facet) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      facets: this.facets.filter(function (f) {\n        return f !== facet;\n      })\n    });\n  },\n\n  /**\n   * Remove a disjunctive facet from the disjunctiveFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet disjunctive facet name to remove\n   * @return {SearchParameters}\n   */\n  removeDisjunctiveFacet: function removeDisjunctiveFacet(facet) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.filter(function (f) {\n        return f !== facet;\n      })\n    });\n  },\n\n  /**\n   * Remove a hierarchical facet from the hierarchicalFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet hierarchical facet name to remove\n   * @return {SearchParameters}\n   */\n  removeHierarchicalFacet: function removeHierarchicalFacet(facet) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.filter(function (f) {\n        return f.name !== facet;\n      })\n    });\n  },\n\n  /**\n   * Remove a refinement set on facet. If a value is provided, it will clear the\n   * refinement for the given value, otherwise it will clear all the refinement\n   * values for the faceted attribute.\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} [value] value used to filter\n   * @return {SearchParameters}\n   */\n  removeFacetRefinement: function removeFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n\n    if (!RefinementList.isRefined(this.facetsRefinements, facet, value)) return this;\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.removeRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n\n  /**\n   * Remove a negative refinement on a facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters}\n   */\n  removeExcludeRefinement: function removeExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n\n    if (!RefinementList.isRefined(this.facetsExcludes, facet, value)) return this;\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.removeRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n\n  /**\n   * Remove a refinement on a disjunctive facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters}\n   */\n  removeDisjunctiveFacetRefinement: function removeDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n\n    if (!RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)) return this;\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.removeRefinement(this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n\n  /**\n   * Remove a tag from the list of tag refinements\n   * @method\n   * @param {string} tag the tag to remove\n   * @return {SearchParameters}\n   */\n  removeTagRefinement: function removeTagRefinement(tag) {\n    if (!this.isTagRefined(tag)) return this;\n    var modification = {\n      tagRefinements: this.tagRefinements.filter(function (t) {\n        return t !== tag;\n      })\n    };\n    return this.setQueryParameters(modification);\n  },\n\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters}\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   * @deprecated since version 2.19.0, see {@link SearchParameters#toggleFacetRefinement}\n   */\n  toggleRefinement: function toggleRefinement(facet, value) {\n    return this.toggleFacetRefinement(facet, value);\n  },\n\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters}\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   */\n  toggleFacetRefinement: function toggleFacetRefinement(facet, value) {\n    if (this.isHierarchicalFacet(facet)) {\n      return this.toggleHierarchicalFacetRefinement(facet, value);\n    } else if (this.isConjunctiveFacet(facet)) {\n      return this.toggleConjunctiveFacetRefinement(facet, value);\n    } else if (this.isDisjunctiveFacet(facet)) {\n      return this.toggleDisjunctiveFacetRefinement(facet, value);\n    }\n\n    throw new Error('Cannot refine the undeclared facet ' + facet + '; it should be added to the helper options facets, disjunctiveFacets or hierarchicalFacets');\n  },\n\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleConjunctiveFacetRefinement: function toggleConjunctiveFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.toggleRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleExcludeFacetRefinement: function toggleExcludeFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.toggleRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleDisjunctiveFacetRefinement: function toggleDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.toggleRefinement(this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleHierarchicalFacetRefinement: function toggleHierarchicalFacetRefinement(facet, value) {\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(facet + ' is not defined in the hierarchicalFacets attribute of the helper configuration');\n    }\n\n    var separator = this._getHierarchicalFacetSeparator(this.getHierarchicalFacetByName(facet));\n\n    var mod = {};\n    var upOneOrMultipleLevel = this.hierarchicalFacetsRefinements[facet] !== undefined && this.hierarchicalFacetsRefinements[facet].length > 0 && ( // remove current refinement:\n    // refinement was 'beer > IPA', call is toggleRefine('beer > IPA'), refinement should be `beer`\n    this.hierarchicalFacetsRefinements[facet][0] === value || // remove a parent refinement of the current refinement:\n    //  - refinement was 'beer > IPA > Flying dog'\n    //  - call is toggleRefine('beer > IPA')\n    //  - refinement should be `beer`\n    this.hierarchicalFacetsRefinements[facet][0].indexOf(value + separator) === 0);\n\n    if (upOneOrMultipleLevel) {\n      if (value.indexOf(separator) === -1) {\n        // go back to root level\n        mod[facet] = [];\n      } else {\n        mod[facet] = [value.slice(0, value.lastIndexOf(separator))];\n      }\n    } else {\n      mod[facet] = [value];\n    }\n\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n\n  /**\n   * Adds a refinement on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @param {string} path the hierarchical facet path\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is refined\n   */\n  addHierarchicalFacetRefinement: function (facet, path) {\n    if (this.isHierarchicalFacetRefined(facet)) {\n      throw new Error(facet + ' is already refined.');\n    }\n\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(facet + ' is not defined in the hierarchicalFacets attribute of the helper configuration.');\n    }\n\n    var mod = {};\n    mod[facet] = [path];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n\n  /**\n   * Removes the refinement set on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is not refined\n   */\n  removeHierarchicalFacetRefinement: function (facet) {\n    if (!this.isHierarchicalFacetRefined(facet)) {\n      return this;\n    }\n\n    var mod = {};\n    mod[facet] = [];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n\n  /**\n   * Switch the tag refinement\n   * @method\n   * @param {string} tag the tag to remove or add\n   * @return {SearchParameters}\n   */\n  toggleTagRefinement: function toggleTagRefinement(tag) {\n    if (this.isTagRefined(tag)) {\n      return this.removeTagRefinement(tag);\n    }\n\n    return this.addTagRefinement(tag);\n  },\n\n  /**\n   * Test if the facet name is from one of the disjunctive facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean}\n   */\n  isDisjunctiveFacet: function (facet) {\n    return this.disjunctiveFacets.indexOf(facet) > -1;\n  },\n\n  /**\n   * Test if the facet name is from one of the hierarchical facets\n   * @method\n   * @param {string} facetName facet name to test\n   * @return {boolean}\n   */\n  isHierarchicalFacet: function (facetName) {\n    return this.getHierarchicalFacetByName(facetName) !== undefined;\n  },\n\n  /**\n   * Test if the facet name is from one of the conjunctive/normal facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean}\n   */\n  isConjunctiveFacet: function (facet) {\n    return this.facets.indexOf(facet) > -1;\n  },\n\n  /**\n   * Returns true if the facet is refined, either for a specific value or in\n   * general.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value, optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isFacetRefined: function isFacetRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n\n    return RefinementList.isRefined(this.facetsRefinements, facet, value);\n  },\n\n  /**\n   * Returns true if the facet contains exclusions or if a specific value is\n   * excluded.\n   *\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} [value] optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isExcludeRefined: function isExcludeRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n\n    return RefinementList.isRefined(this.facetsExcludes, facet, value);\n  },\n\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean}\n   */\n  isDisjunctiveFacetRefined: function isDisjunctiveFacetRefined(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return false;\n    }\n\n    return RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value);\n  },\n\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean}\n   */\n  isHierarchicalFacetRefined: function isHierarchicalFacetRefined(facet, value) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return false;\n    }\n\n    var refinements = this.getHierarchicalRefinement(facet);\n\n    if (!value) {\n      return refinements.length > 0;\n    }\n\n    return refinements.indexOf(value) !== -1;\n  },\n\n  /**\n   * Test if the triple (attribute, operator, value) is already refined.\n   * If only the attribute and the operator are provided, it tests if the\n   * contains any refinement value.\n   * @method\n   * @param {string} attribute attribute for which the refinement is applied\n   * @param {string} [operator] operator of the refinement\n   * @param {string} [value] value of the refinement\n   * @return {boolean} true if it is refined\n   */\n  isNumericRefined: function isNumericRefined(attribute, operator, value) {\n    if (value === undefined && operator === undefined) {\n      return !!this.numericRefinements[attribute];\n    }\n\n    var isOperatorDefined = this.numericRefinements[attribute] && this.numericRefinements[attribute][operator] !== undefined;\n\n    if (value === undefined || !isOperatorDefined) {\n      return isOperatorDefined;\n    }\n\n    var parsedValue = valToNumber(value);\n    var isAttributeValueDefined = findArray(this.numericRefinements[attribute][operator], parsedValue) !== undefined;\n    return isOperatorDefined && isAttributeValueDefined;\n  },\n\n  /**\n   * Returns true if the tag refined, false otherwise\n   * @method\n   * @param {string} tag the tag to check\n   * @return {boolean}\n   */\n  isTagRefined: function isTagRefined(tag) {\n    return this.tagRefinements.indexOf(tag) !== -1;\n  },\n\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]}\n   */\n  getRefinedDisjunctiveFacets: function getRefinedDisjunctiveFacets() {\n    var self = this; // attributes used for numeric filter can also be disjunctive\n\n    var disjunctiveNumericRefinedFacets = intersection(Object.keys(this.numericRefinements).filter(function (facet) {\n      return Object.keys(self.numericRefinements[facet]).length > 0;\n    }), this.disjunctiveFacets);\n    return Object.keys(this.disjunctiveFacetsRefinements).filter(function (facet) {\n      return self.disjunctiveFacetsRefinements[facet].length > 0;\n    }).concat(disjunctiveNumericRefinedFacets).concat(this.getRefinedHierarchicalFacets());\n  },\n\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]}\n   */\n  getRefinedHierarchicalFacets: function getRefinedHierarchicalFacets() {\n    var self = this;\n    return intersection( // enforce the order between the two arrays,\n    // so that refinement name index === hierarchical facet index\n    this.hierarchicalFacets.map(function (facet) {\n      return facet.name;\n    }), Object.keys(this.hierarchicalFacetsRefinements).filter(function (facet) {\n      return self.hierarchicalFacetsRefinements[facet].length > 0;\n    }));\n  },\n\n  /**\n   * Returned the list of all disjunctive facets not refined\n   * @method\n   * @return {string[]}\n   */\n  getUnrefinedDisjunctiveFacets: function () {\n    var refinedFacets = this.getRefinedDisjunctiveFacets();\n    return this.disjunctiveFacets.filter(function (f) {\n      return refinedFacets.indexOf(f) === -1;\n    });\n  },\n  managedParameters: ['index', 'facets', 'disjunctiveFacets', 'facetsRefinements', 'hierarchicalFacets', 'facetsExcludes', 'disjunctiveFacetsRefinements', 'numericRefinements', 'tagRefinements', 'hierarchicalFacetsRefinements'],\n  getQueryParams: function getQueryParams() {\n    var managedParameters = this.managedParameters;\n    var queryParams = {};\n    var self = this;\n    Object.keys(this).forEach(function (paramName) {\n      var paramValue = self[paramName];\n\n      if (managedParameters.indexOf(paramName) === -1 && paramValue !== undefined) {\n        queryParams[paramName] = paramValue;\n      }\n    });\n    return queryParams;\n  },\n\n  /**\n   * Let the user set a specific value for a given parameter. Will return the\n   * same instance if the parameter is invalid or if the value is the same as the\n   * previous one.\n   * @method\n   * @param {string} parameter the parameter name\n   * @param {any} value the value to be set, must be compliant with the definition\n   * of the attribute on the object\n   * @return {SearchParameters} the updated state\n   */\n  setQueryParameter: function setParameter(parameter, value) {\n    if (this[parameter] === value) return this;\n    var modification = {};\n    modification[parameter] = value;\n    return this.setQueryParameters(modification);\n  },\n\n  /**\n   * Let the user set any of the parameters with a plain object.\n   * @method\n   * @param {object} params all the keys and the values to be updated\n   * @return {SearchParameters} a new updated instance\n   */\n  setQueryParameters: function setQueryParameters(params) {\n    if (!params) return this;\n    var error = SearchParameters.validate(this, params);\n\n    if (error) {\n      throw error;\n    }\n\n    var self = this;\n\n    var nextWithNumbers = SearchParameters._parseNumbers(params);\n\n    var previousPlainObject = Object.keys(this).reduce(function (acc, key) {\n      acc[key] = self[key];\n      return acc;\n    }, {});\n    var nextPlainObject = Object.keys(nextWithNumbers).reduce(function (previous, key) {\n      var isPreviousValueDefined = previous[key] !== undefined;\n      var isNextValueDefined = nextWithNumbers[key] !== undefined;\n\n      if (isPreviousValueDefined && !isNextValueDefined) {\n        return omit(previous, [key]);\n      }\n\n      if (isNextValueDefined) {\n        previous[key] = nextWithNumbers[key];\n      }\n\n      return previous;\n    }, previousPlainObject);\n    return new this.constructor(nextPlainObject);\n  },\n\n  /**\n   * Returns a new instance with the page reset. Two scenarios possible:\n   * the page is omitted -> return the given instance\n   * the page is set -> return a new instance with a page of 0\n   * @return {SearchParameters} a new updated instance\n   */\n  resetPage: function () {\n    if (this.page === undefined) {\n      return this;\n    }\n\n    return this.setPage(0);\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSortBy: function (hierarchicalFacet) {\n    return hierarchicalFacet.sortBy || ['isRefined:desc', 'name:asc'];\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @private\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSeparator: function (hierarchicalFacet) {\n    return hierarchicalFacet.separator || ' > ';\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet prefix path or null\n   * @private\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.rootPath or null as default\n   */\n  _getHierarchicalRootPath: function (hierarchicalFacet) {\n    return hierarchicalFacet.rootPath || null;\n  },\n\n  /**\n   * Helper function to check if we show the parent level of the hierarchicalFacet\n   * @private\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.showParentLevel or true as default\n   */\n  _getHierarchicalShowParentLevel: function (hierarchicalFacet) {\n    if (typeof hierarchicalFacet.showParentLevel === 'boolean') {\n      return hierarchicalFacet.showParentLevel;\n    }\n\n    return true;\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet by it's name\n   * @param  {string} hierarchicalFacetName\n   * @return {object} a hierarchicalFacet\n   */\n  getHierarchicalFacetByName: function (hierarchicalFacetName) {\n    return find(this.hierarchicalFacets, function (f) {\n      return f.name === hierarchicalFacetName;\n    });\n  },\n\n  /**\n   * Get the current breadcrumb for a hierarchical facet, as an array\n   * @param  {string} facetName Hierarchical facet name\n   * @return {array.<string>} the path as an array of string\n   */\n  getHierarchicalFacetBreadcrumb: function (facetName) {\n    if (!this.isHierarchicalFacet(facetName)) {\n      return [];\n    }\n\n    var refinement = this.getHierarchicalRefinement(facetName)[0];\n    if (!refinement) return [];\n\n    var separator = this._getHierarchicalFacetSeparator(this.getHierarchicalFacetByName(facetName));\n\n    var path = refinement.split(separator);\n    return path.map(function (part) {\n      return part.trim();\n    });\n  },\n  toString: function () {\n    return JSON.stringify(this, null, 2);\n  }\n};\n/**\n * Callback used for clearRefinement method\n * @callback SearchParameters.clearCallback\n * @param {OperatorList|FacetList} value the value of the filter\n * @param {string} key the current attribute name\n * @param {string} type `numeric`, `disjunctiveFacet`, `conjunctiveFacet`, `hierarchicalFacet` or `exclude`\n * depending on the type of facet\n * @return {boolean} `true` if the element should be removed. `false` otherwise.\n */\n\nmodule.exports = SearchParameters;","map":{"version":3,"names":["merge","require","defaultsPure","intersection","find","valToNumber","omit","objectHasKeys","isValidUserToken","RefinementList","isEqualNumericRefinement","a","b","Array","isArray","length","every","el","i","findArray","array","searchedValue","currentValue","SearchParameters","newParameters","params","_parseNumbers","userToken","undefined","console","warn","facets","disjunctiveFacets","hierarchicalFacets","facetsRefinements","facetsExcludes","disjunctiveFacetsRefinements","numericRefinements","tagRefinements","hierarchicalFacetsRefinements","self","Object","keys","forEach","paramName","isKeyKnown","PARAMETERS","indexOf","isValueDefined","partialState","numbers","numberKeys","k","value","parsedValue","parseFloat","isNaN","insideBoundingBox","map","geoRect","attribute","operators","operator","values","parsedValues","v","vPrime","make","makeSearchParameters","instance","facet","rootPath","currentRefinement","getHierarchicalRefinement","name","clearRefinements","toggleHierarchicalFacetRefinement","validate","currentState","parameters","tagFilters","Error","numericFilters","prototype","constructor","patch","_clearNumericRefinements","clearRefinement","setQueryParameters","clearTags","setIndex","index","setQuery","newQuery","query","setPage","newPage","page","setFacets","setDisjunctiveFacets","setHitsPerPage","n","hitsPerPage","setTypoTolerance","typoTolerance","addNumericRefinement","isNumericRefined","mod","slice","push","getConjunctiveRefinements","facetName","isConjunctiveFacet","getDisjunctiveRefinements","isDisjunctiveFacet","getExcludeRefinements","removeNumericRefinement","paramValue","key","op","val","getNumericRefinements","getNumericRefinement","hasChanged","newNumericRefinements","reduce","memo","operatorList","outValues","predicateResult","addFacet","concat","addDisjunctiveFacet","addHierarchicalFacet","hierarchicalFacet","isHierarchicalFacet","addFacetRefinement","isRefined","addRefinement","addExcludeRefinement","addDisjunctiveFacetRefinement","addTagRefinement","tag","isTagRefined","modification","removeFacet","filter","f","removeDisjunctiveFacet","removeHierarchicalFacet","removeFacetRefinement","removeRefinement","removeExcludeRefinement","removeDisjunctiveFacetRefinement","removeTagRefinement","t","toggleRefinement","toggleFacetRefinement","toggleConjunctiveFacetRefinement","toggleDisjunctiveFacetRefinement","toggleExcludeFacetRefinement","separator","_getHierarchicalFacetSeparator","getHierarchicalFacetByName","upOneOrMultipleLevel","lastIndexOf","addHierarchicalFacetRefinement","path","isHierarchicalFacetRefined","removeHierarchicalFacetRefinement","toggleTagRefinement","isFacetRefined","isExcludeRefined","isDisjunctiveFacetRefined","refinements","isOperatorDefined","isAttributeValueDefined","getRefinedDisjunctiveFacets","disjunctiveNumericRefinedFacets","getRefinedHierarchicalFacets","getUnrefinedDisjunctiveFacets","refinedFacets","managedParameters","getQueryParams","queryParams","setQueryParameter","setParameter","parameter","error","nextWithNumbers","previousPlainObject","acc","nextPlainObject","previous","isPreviousValueDefined","isNextValueDefined","resetPage","_getHierarchicalFacetSortBy","sortBy","_getHierarchicalRootPath","_getHierarchicalShowParentLevel","showParentLevel","hierarchicalFacetName","getHierarchicalFacetBreadcrumb","refinement","split","part","trim","toString","JSON","stringify","module","exports"],"sources":["/home/dedm/Documents/sript/lab3-script/node_modules/algoliasearch-helper/src/SearchParameters/index.js"],"sourcesContent":["'use strict';\n\nvar merge = require('../functions/merge');\nvar defaultsPure = require('../functions/defaultsPure');\nvar intersection = require('../functions/intersection');\nvar find = require('../functions/find');\nvar valToNumber = require('../functions/valToNumber');\nvar omit = require('../functions/omit');\nvar objectHasKeys = require('../functions/objectHasKeys');\nvar isValidUserToken = require('../utils/isValidUserToken');\n\nvar RefinementList = require('./RefinementList');\n\n/**\n * isEqual, but only for numeric refinement values, possible values:\n * - 5\n * - [5]\n * - [[5]]\n * - [[5,5],[4]]\n */\nfunction isEqualNumericRefinement(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return (\n      a.length === b.length &&\n      a.every(function(el, i) {\n        return isEqualNumericRefinement(b[i], el);\n      })\n    );\n  }\n  return a === b;\n}\n\n/**\n * like _.find but using deep equality to be able to use it\n * to find arrays.\n * @private\n * @param {any[]} array array to search into (elements are base or array of base)\n * @param {any} searchedValue the value we're looking for (base or array of base)\n * @return {any} the searched value or undefined\n */\nfunction findArray(array, searchedValue) {\n  return find(array, function(currentValue) {\n    return isEqualNumericRefinement(currentValue, searchedValue);\n  });\n}\n\n/**\n * The facet list is the structure used to store the list of values used to\n * filter a single attribute.\n * @typedef {string[]} SearchParameters.FacetList\n */\n\n/**\n * Structure to store numeric filters with the operator as the key. The supported operators\n * are `=`, `>`, `<`, `>=`, `<=` and `!=`.\n * @typedef {Object.<string, Array.<number|number[]>>} SearchParameters.OperatorList\n */\n\n/**\n * SearchParameters is the data structure that contains all the information\n * usable for making a search to Algolia API. It doesn't do the search itself,\n * nor does it contains logic about the parameters.\n * It is an immutable object, therefore it has been created in a way that each\n * changes does not change the object itself but returns a copy with the\n * modification.\n * This object should probably not be instantiated outside of the helper. It will\n * be provided when needed. This object is documented for reference as you'll\n * get it from events generated by the {@link AlgoliaSearchHelper}.\n * If need be, instantiate the Helper from the factory function {@link SearchParameters.make}\n * @constructor\n * @classdesc contains all the parameters of a search\n * @param {object|SearchParameters} newParameters existing parameters or partial object\n * for the properties of a new SearchParameters\n * @see SearchParameters.make\n * @example <caption>SearchParameters of the first query in\n *   <a href=\"http://demos.algolia.com/instant-search-demo/\">the instant search demo</a></caption>\n{\n   \"query\": \"\",\n   \"disjunctiveFacets\": [\n      \"customerReviewCount\",\n      \"category\",\n      \"salePrice_range\",\n      \"manufacturer\"\n  ],\n   \"maxValuesPerFacet\": 30,\n   \"page\": 0,\n   \"hitsPerPage\": 10,\n   \"facets\": [\n      \"type\",\n      \"shipping\"\n  ]\n}\n */\nfunction SearchParameters(newParameters) {\n  var params = newParameters ? SearchParameters._parseNumbers(newParameters) : {};\n\n  if (params.userToken !== undefined && !isValidUserToken(params.userToken)) {\n    console.warn('[algoliasearch-helper] The `userToken` parameter is invalid. This can lead to wrong analytics.\\n  - Format: [a-zA-Z0-9_-]{1,64}');\n  }\n  /**\n   * This attribute contains the list of all the conjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n  this.facets = params.facets || [];\n  /**\n   * This attribute contains the list of all the disjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n  this.disjunctiveFacets = params.disjunctiveFacets || [];\n  /**\n   * This attribute contains the list of all the hierarchical facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * Hierarchical facets are a sub type of disjunctive facets that\n   * let you filter faceted attributes hierarchically.\n   * @member {string[]|object[]}\n   */\n  this.hierarchicalFacets = params.hierarchicalFacets || [];\n\n  // Refinements\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.facetsRefinements = params.facetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * excluded from the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters excluded for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.facetsExcludes = params.facetsExcludes || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the disjunctive facets. Each facet must be properly\n   * defined in the `disjunctiveFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.disjunctiveFacetsRefinements = params.disjunctiveFacetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the numeric attributes.\n   *\n   * The key is the name of the attribute, and the value is the\n   * filters to apply to this attribute.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `numericFilters` attribute.\n   * @member {Object.<string, SearchParameters.OperatorList>}\n   */\n  this.numericRefinements = params.numericRefinements || {};\n  /**\n   * This attribute contains all the tags used to refine the query.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `tagFilters` attribute.\n   * @member {string[]}\n   */\n  this.tagRefinements = params.tagRefinements || [];\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the hierarchical facets. Each facet must be properly\n   * defined in the `hierarchicalFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name. The FacetList values\n   * are structured as a string that contain the values for each level\n   * separated by the configured separator.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.hierarchicalFacetsRefinements = params.hierarchicalFacetsRefinements || {};\n\n  var self = this;\n  Object.keys(params).forEach(function(paramName) {\n    var isKeyKnown = SearchParameters.PARAMETERS.indexOf(paramName) !== -1;\n    var isValueDefined = params[paramName] !== undefined;\n\n    if (!isKeyKnown && isValueDefined) {\n      self[paramName] = params[paramName];\n    }\n  });\n}\n\n/**\n * List all the properties in SearchParameters and therefore all the known Algolia properties\n * This doesn't contain any beta/hidden features.\n * @private\n */\nSearchParameters.PARAMETERS = Object.keys(new SearchParameters());\n\n/**\n * @private\n * @param {object} partialState full or part of a state\n * @return {object} a new object with the number keys as number\n */\nSearchParameters._parseNumbers = function(partialState) {\n  // Do not reparse numbers in SearchParameters, they ought to be parsed already\n  if (partialState instanceof SearchParameters) return partialState;\n\n  var numbers = {};\n\n  var numberKeys = [\n    'aroundPrecision',\n    'aroundRadius',\n    'getRankingInfo',\n    'minWordSizefor2Typos',\n    'minWordSizefor1Typo',\n    'page',\n    'maxValuesPerFacet',\n    'distinct',\n    'minimumAroundRadius',\n    'hitsPerPage',\n    'minProximity'\n  ];\n\n  numberKeys.forEach(function(k) {\n    var value = partialState[k];\n    if (typeof value === 'string') {\n      var parsedValue = parseFloat(value);\n      // global isNaN is ok to use here, value is only number or NaN\n      numbers[k] = isNaN(parsedValue) ? value : parsedValue;\n    }\n  });\n\n  // there's two formats of insideBoundingBox, we need to parse\n  // the one which is an array of float geo rectangles\n  if (Array.isArray(partialState.insideBoundingBox)) {\n    numbers.insideBoundingBox = partialState.insideBoundingBox.map(function(geoRect) {\n      if (Array.isArray(geoRect)) {\n        return geoRect.map(function(value) {\n          return parseFloat(value);\n        });\n      }\n      return geoRect;\n    });\n  }\n\n  if (partialState.numericRefinements) {\n    var numericRefinements = {};\n    Object.keys(partialState.numericRefinements).forEach(function(attribute) {\n      var operators = partialState.numericRefinements[attribute] || {};\n      numericRefinements[attribute] = {};\n      Object.keys(operators).forEach(function(operator) {\n        var values = operators[operator];\n        var parsedValues = values.map(function(v) {\n          if (Array.isArray(v)) {\n            return v.map(function(vPrime) {\n              if (typeof vPrime === 'string') {\n                return parseFloat(vPrime);\n              }\n              return vPrime;\n            });\n          } else if (typeof v === 'string') {\n            return parseFloat(v);\n          }\n          return v;\n        });\n        numericRefinements[attribute][operator] = parsedValues;\n      });\n    });\n    numbers.numericRefinements = numericRefinements;\n  }\n\n  return merge({}, partialState, numbers);\n};\n\n/**\n * Factory for SearchParameters\n * @param {object|SearchParameters} newParameters existing parameters or partial\n * object for the properties of a new SearchParameters\n * @return {SearchParameters} frozen instance of SearchParameters\n */\nSearchParameters.make = function makeSearchParameters(newParameters) {\n  var instance = new SearchParameters(newParameters);\n\n  var hierarchicalFacets = newParameters.hierarchicalFacets || [];\n  hierarchicalFacets.forEach(function(facet) {\n    if (facet.rootPath) {\n      var currentRefinement = instance.getHierarchicalRefinement(facet.name);\n\n      if (currentRefinement.length > 0 && currentRefinement[0].indexOf(facet.rootPath) !== 0) {\n        instance = instance.clearRefinements(facet.name);\n      }\n\n      // get it again in case it has been cleared\n      currentRefinement = instance.getHierarchicalRefinement(facet.name);\n      if (currentRefinement.length === 0) {\n        instance = instance.toggleHierarchicalFacetRefinement(facet.name, facet.rootPath);\n      }\n    }\n  });\n\n  return instance;\n};\n\n/**\n * Validates the new parameters based on the previous state\n * @param {SearchParameters} currentState the current state\n * @param {object|SearchParameters} parameters the new parameters to set\n * @return {Error|null} Error if the modification is invalid, null otherwise\n */\nSearchParameters.validate = function(currentState, parameters) {\n  var params = parameters || {};\n\n  if (currentState.tagFilters && params.tagRefinements && params.tagRefinements.length > 0) {\n    return new Error(\n      '[Tags] Cannot switch from the managed tag API to the advanced API. It is probably ' +\n      'an error, if it is really what you want, you should first clear the tags with clearTags method.');\n  }\n\n  if (currentState.tagRefinements.length > 0 && params.tagFilters) {\n    return new Error(\n      '[Tags] Cannot switch from the advanced tag API to the managed API. It is probably ' +\n      'an error, if it is not, you should first clear the tags with clearTags method.');\n  }\n\n  if (\n    currentState.numericFilters &&\n    params.numericRefinements &&\n    objectHasKeys(params.numericRefinements)\n  ) {\n    return new Error(\n      \"[Numeric filters] Can't switch from the advanced to the managed API. It\" +\n        ' is probably an error, if this is really what you want, you have to first' +\n        ' clear the numeric filters.'\n    );\n  }\n\n  if (objectHasKeys(currentState.numericRefinements) && params.numericFilters) {\n    return new Error(\n      \"[Numeric filters] Can't switch from the managed API to the advanced. It\" +\n      ' is probably an error, if this is really what you want, you have to first' +\n      ' clear the numeric filters.');\n  }\n\n  return null;\n};\n\nSearchParameters.prototype = {\n  constructor: SearchParameters,\n\n  /**\n   * Remove all refinements (disjunctive + conjunctive + excludes + numeric filters)\n   * @method\n   * @param {undefined|string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {SearchParameters}\n   */\n  clearRefinements: function clearRefinements(attribute) {\n    var patch = {\n      numericRefinements: this._clearNumericRefinements(attribute),\n      facetsRefinements: RefinementList.clearRefinement(\n        this.facetsRefinements,\n        attribute,\n        'conjunctiveFacet'\n      ),\n      facetsExcludes: RefinementList.clearRefinement(\n        this.facetsExcludes,\n        attribute,\n        'exclude'\n      ),\n      disjunctiveFacetsRefinements: RefinementList.clearRefinement(\n        this.disjunctiveFacetsRefinements,\n        attribute,\n        'disjunctiveFacet'\n      ),\n      hierarchicalFacetsRefinements: RefinementList.clearRefinement(\n        this.hierarchicalFacetsRefinements,\n        attribute,\n        'hierarchicalFacet'\n      )\n    };\n    if (\n      patch.numericRefinements === this.numericRefinements &&\n      patch.facetsRefinements === this.facetsRefinements &&\n      patch.facetsExcludes === this.facetsExcludes &&\n      patch.disjunctiveFacetsRefinements === this.disjunctiveFacetsRefinements &&\n      patch.hierarchicalFacetsRefinements === this.hierarchicalFacetsRefinements\n    ) {\n      return this;\n    }\n    return this.setQueryParameters(patch);\n  },\n  /**\n   * Remove all the refined tags from the SearchParameters\n   * @method\n   * @return {SearchParameters}\n   */\n  clearTags: function clearTags() {\n    if (this.tagFilters === undefined && this.tagRefinements.length === 0) return this;\n\n    return this.setQueryParameters({\n      tagFilters: undefined,\n      tagRefinements: []\n    });\n  },\n  /**\n   * Set the index.\n   * @method\n   * @param {string} index the index name\n   * @return {SearchParameters}\n   */\n  setIndex: function setIndex(index) {\n    if (index === this.index) return this;\n\n    return this.setQueryParameters({\n      index: index\n    });\n  },\n  /**\n   * Query setter\n   * @method\n   * @param {string} newQuery value for the new query\n   * @return {SearchParameters}\n   */\n  setQuery: function setQuery(newQuery) {\n    if (newQuery === this.query) return this;\n\n    return this.setQueryParameters({\n      query: newQuery\n    });\n  },\n  /**\n   * Page setter\n   * @method\n   * @param {number} newPage new page number\n   * @return {SearchParameters}\n   */\n  setPage: function setPage(newPage) {\n    if (newPage === this.page) return this;\n\n    return this.setQueryParameters({\n      page: newPage\n    });\n  },\n  /**\n   * Facets setter\n   * The facets are the simple facets, used for conjunctive (and) faceting.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for conjunctive faceting\n   * @return {SearchParameters}\n   */\n  setFacets: function setFacets(facets) {\n    return this.setQueryParameters({\n      facets: facets\n    });\n  },\n  /**\n   * Disjunctive facets setter\n   * Change the list of disjunctive (or) facets the helper chan handle.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for disjunctive faceting\n   * @return {SearchParameters}\n   */\n  setDisjunctiveFacets: function setDisjunctiveFacets(facets) {\n    return this.setQueryParameters({\n      disjunctiveFacets: facets\n    });\n  },\n  /**\n   * HitsPerPage setter\n   * Hits per page represents the number of hits retrieved for this query\n   * @method\n   * @param {number} n number of hits retrieved per page of results\n   * @return {SearchParameters}\n   */\n  setHitsPerPage: function setHitsPerPage(n) {\n    if (this.hitsPerPage === n) return this;\n\n    return this.setQueryParameters({\n      hitsPerPage: n\n    });\n  },\n  /**\n   * typoTolerance setter\n   * Set the value of typoTolerance\n   * @method\n   * @param {string} typoTolerance new value of typoTolerance (\"true\", \"false\", \"min\" or \"strict\")\n   * @return {SearchParameters}\n   */\n  setTypoTolerance: function setTypoTolerance(typoTolerance) {\n    if (this.typoTolerance === typoTolerance) return this;\n\n    return this.setQueryParameters({\n      typoTolerance: typoTolerance\n    });\n  },\n  /**\n   * Add a numeric filter for a given attribute\n   * When value is an array, they are combined with OR\n   * When value is a single value, it will combined with AND\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} operator operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number | number[]} value value of the filter\n   * @return {SearchParameters}\n   * @example\n   * // for price = 50 or 40\n   * searchparameter.addNumericRefinement('price', '=', [50, 40]);\n   * @example\n   * // for size = 38 and 40\n   * searchparameter.addNumericRefinement('size', '=', 38);\n   * searchparameter.addNumericRefinement('size', '=', 40);\n   */\n  addNumericRefinement: function(attribute, operator, v) {\n    var value = valToNumber(v);\n\n    if (this.isNumericRefined(attribute, operator, value)) return this;\n\n    var mod = merge({}, this.numericRefinements);\n\n    mod[attribute] = merge({}, mod[attribute]);\n\n    if (mod[attribute][operator]) {\n      // Array copy\n      mod[attribute][operator] = mod[attribute][operator].slice();\n      // Add the element. Concat can't be used here because value can be an array.\n      mod[attribute][operator].push(value);\n    } else {\n      mod[attribute][operator] = [value];\n    }\n\n    return this.setQueryParameters({\n      numericRefinements: mod\n    });\n  },\n  /**\n   * Get the list of conjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getConjunctiveRefinements: function(facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of disjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getDisjunctiveRefinements: function(facetName) {\n    if (!this.isDisjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.disjunctiveFacetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of hierarchical refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getHierarchicalRefinement: function(facetName) {\n    // we send an array but we currently do not support multiple\n    // hierarchicalRefinements for a hierarchicalFacet\n    return this.hierarchicalFacetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of exclude refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getExcludeRefinements: function(facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsExcludes[facetName] || [];\n  },\n\n  /**\n   * Remove all the numeric filter for a given (attribute, operator)\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} [operator] operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number} [number] the value to be removed\n   * @return {SearchParameters}\n   */\n  removeNumericRefinement: function(attribute, operator, paramValue) {\n    if (paramValue !== undefined) {\n      if (!this.isNumericRefined(attribute, operator, paramValue)) {\n        return this;\n      }\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function(value, key) {\n          return (\n            key === attribute &&\n            value.op === operator &&\n            isEqualNumericRefinement(value.val, valToNumber(paramValue))\n          );\n        })\n      });\n    } else if (operator !== undefined) {\n      if (!this.isNumericRefined(attribute, operator)) return this;\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function(value, key) {\n          return key === attribute && value.op === operator;\n        })\n      });\n    }\n\n    if (!this.isNumericRefined(attribute)) return this;\n    return this.setQueryParameters({\n      numericRefinements: this._clearNumericRefinements(function(value, key) {\n        return key === attribute;\n      })\n    });\n  },\n  /**\n   * Get the list of numeric refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {SearchParameters.OperatorList} list of refinements\n   */\n  getNumericRefinements: function(facetName) {\n    return this.numericRefinements[facetName] || {};\n  },\n  /**\n   * Return the current refinement for the (attribute, operator)\n   * @param {string} attribute attribute in the record\n   * @param {string} operator operator applied on the refined values\n   * @return {Array.<number|number[]>} refined values\n   */\n  getNumericRefinement: function(attribute, operator) {\n    return this.numericRefinements[attribute] && this.numericRefinements[attribute][operator];\n  },\n  /**\n   * Clear numeric filters.\n   * @method\n   * @private\n   * @param {string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {Object.<string, OperatorList>}\n   */\n  _clearNumericRefinements: function _clearNumericRefinements(attribute) {\n    if (attribute === undefined) {\n      if (!objectHasKeys(this.numericRefinements)) {\n        return this.numericRefinements;\n      }\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(this.numericRefinements, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n      var numericRefinements = this.numericRefinements;\n      var newNumericRefinements = Object.keys(numericRefinements).reduce(function(memo, key) {\n        var operators = numericRefinements[key];\n        var operatorList = {};\n\n        operators = operators || {};\n        Object.keys(operators).forEach(function(operator) {\n          var values = operators[operator] || [];\n          var outValues = [];\n          values.forEach(function(value) {\n            var predicateResult = attribute({val: value, op: operator}, key, 'numeric');\n            if (!predicateResult) outValues.push(value);\n          });\n          if (outValues.length !== values.length) {\n            hasChanged = true;\n          }\n          operatorList[operator] = outValues;\n        });\n\n        memo[key] = operatorList;\n\n        return memo;\n      }, {});\n\n      if (hasChanged) return newNumericRefinements;\n      return this.numericRefinements;\n    }\n  },\n  /**\n   * Add a facet to the facets attribute of the helper configuration, if it\n   * isn't already present.\n   * @method\n   * @param {string} facet facet name to add\n   * @return {SearchParameters}\n   */\n  addFacet: function addFacet(facet) {\n    if (this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.setQueryParameters({\n      facets: this.facets.concat([facet])\n    });\n  },\n  /**\n   * Add a disjunctive facet to the disjunctiveFacets attribute of the helper\n   * configuration, if it isn't already present.\n   * @method\n   * @param {string} facet disjunctive facet name to add\n   * @return {SearchParameters}\n   */\n  addDisjunctiveFacet: function addDisjunctiveFacet(facet) {\n    if (this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.concat([facet])\n    });\n  },\n  /**\n   * Add a hierarchical facet to the hierarchicalFacets attribute of the helper\n   * configuration.\n   * @method\n   * @param {object} hierarchicalFacet hierarchical facet to add\n   * @return {SearchParameters}\n   * @throws will throw an error if a hierarchical facet with the same name was already declared\n   */\n  addHierarchicalFacet: function addHierarchicalFacet(hierarchicalFacet) {\n    if (this.isHierarchicalFacet(hierarchicalFacet.name)) {\n      throw new Error(\n        'Cannot declare two hierarchical facets with the same name: `' + hierarchicalFacet.name + '`');\n    }\n\n    return this.setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.concat([hierarchicalFacet])\n    });\n  },\n  /**\n   * Add a refinement on a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters}\n   */\n  addFacetRefinement: function addFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (RefinementList.isRefined(this.facetsRefinements, facet, value)) return this;\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.addRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Exclude a value from a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the exclusion on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters}\n   */\n  addExcludeRefinement: function addExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (RefinementList.isRefined(this.facetsExcludes, facet, value)) return this;\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.addRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n  /**\n   * Adds a refinement on a disjunctive facet.\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters}\n   */\n  addDisjunctiveFacetRefinement: function addDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n\n    if (RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)) return this;\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.addRefinement(\n        this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n  /**\n   * addTagRefinement adds a tag to the list used to filter the results\n   * @param {string} tag tag to be added\n   * @return {SearchParameters}\n   */\n  addTagRefinement: function addTagRefinement(tag) {\n    if (this.isTagRefined(tag)) return this;\n\n    var modification = {\n      tagRefinements: this.tagRefinements.concat(tag)\n    };\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Remove a facet from the facets attribute of the helper configuration, if it\n   * is present.\n   * @method\n   * @param {string} facet facet name to remove\n   * @return {SearchParameters}\n   */\n  removeFacet: function removeFacet(facet) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      facets: this.facets.filter(function(f) {\n        return f !== facet;\n      })\n    });\n  },\n  /**\n   * Remove a disjunctive facet from the disjunctiveFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet disjunctive facet name to remove\n   * @return {SearchParameters}\n   */\n  removeDisjunctiveFacet: function removeDisjunctiveFacet(facet) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.filter(function(f) {\n        return f !== facet;\n      })\n    });\n  },\n  /**\n   * Remove a hierarchical facet from the hierarchicalFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet hierarchical facet name to remove\n   * @return {SearchParameters}\n   */\n  removeHierarchicalFacet: function removeHierarchicalFacet(facet) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.filter(function(f) {\n        return f.name !== facet;\n      })\n    });\n  },\n  /**\n   * Remove a refinement set on facet. If a value is provided, it will clear the\n   * refinement for the given value, otherwise it will clear all the refinement\n   * values for the faceted attribute.\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} [value] value used to filter\n   * @return {SearchParameters}\n   */\n  removeFacetRefinement: function removeFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (!RefinementList.isRefined(this.facetsRefinements, facet, value)) return this;\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.removeRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Remove a negative refinement on a facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters}\n   */\n  removeExcludeRefinement: function removeExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n    if (!RefinementList.isRefined(this.facetsExcludes, facet, value)) return this;\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.removeRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n  /**\n   * Remove a refinement on a disjunctive facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters}\n   */\n  removeDisjunctiveFacetRefinement: function removeDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n    if (!RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)) return this;\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.removeRefinement(\n        this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Remove a tag from the list of tag refinements\n   * @method\n   * @param {string} tag the tag to remove\n   * @return {SearchParameters}\n   */\n  removeTagRefinement: function removeTagRefinement(tag) {\n    if (!this.isTagRefined(tag)) return this;\n\n    var modification = {\n      tagRefinements: this.tagRefinements.filter(function(t) {\n        return t !== tag;\n      })\n    };\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters}\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   * @deprecated since version 2.19.0, see {@link SearchParameters#toggleFacetRefinement}\n   */\n  toggleRefinement: function toggleRefinement(facet, value) {\n    return this.toggleFacetRefinement(facet, value);\n  },\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters}\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   */\n  toggleFacetRefinement: function toggleFacetRefinement(facet, value) {\n    if (this.isHierarchicalFacet(facet)) {\n      return this.toggleHierarchicalFacetRefinement(facet, value);\n    } else if (this.isConjunctiveFacet(facet)) {\n      return this.toggleConjunctiveFacetRefinement(facet, value);\n    } else if (this.isDisjunctiveFacet(facet)) {\n      return this.toggleDisjunctiveFacetRefinement(facet, value);\n    }\n\n    throw new Error('Cannot refine the undeclared facet ' + facet +\n      '; it should be added to the helper options facets, disjunctiveFacets or hierarchicalFacets');\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleConjunctiveFacetRefinement: function toggleConjunctiveFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.toggleRefinement(this.facetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleExcludeFacetRefinement: function toggleExcludeFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\n    }\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.toggleRefinement(this.facetsExcludes, facet, value)\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleDisjunctiveFacetRefinement: function toggleDisjunctiveFacetRefinement(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\n    }\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.toggleRefinement(\n        this.disjunctiveFacetsRefinements, facet, value)\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters}\n   */\n  toggleHierarchicalFacetRefinement: function toggleHierarchicalFacetRefinement(facet, value) {\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(\n        facet + ' is not defined in the hierarchicalFacets attribute of the helper configuration');\n    }\n\n    var separator = this._getHierarchicalFacetSeparator(this.getHierarchicalFacetByName(facet));\n\n    var mod = {};\n\n    var upOneOrMultipleLevel = this.hierarchicalFacetsRefinements[facet] !== undefined &&\n      this.hierarchicalFacetsRefinements[facet].length > 0 && (\n      // remove current refinement:\n      // refinement was 'beer > IPA', call is toggleRefine('beer > IPA'), refinement should be `beer`\n      this.hierarchicalFacetsRefinements[facet][0] === value ||\n      // remove a parent refinement of the current refinement:\n      //  - refinement was 'beer > IPA > Flying dog'\n      //  - call is toggleRefine('beer > IPA')\n      //  - refinement should be `beer`\n      this.hierarchicalFacetsRefinements[facet][0].indexOf(value + separator) === 0\n    );\n\n    if (upOneOrMultipleLevel) {\n      if (value.indexOf(separator) === -1) {\n        // go back to root level\n        mod[facet] = [];\n      } else {\n        mod[facet] = [value.slice(0, value.lastIndexOf(separator))];\n      }\n    } else {\n      mod[facet] = [value];\n    }\n\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n\n  /**\n   * Adds a refinement on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @param {string} path the hierarchical facet path\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is refined\n   */\n  addHierarchicalFacetRefinement: function(facet, path) {\n    if (this.isHierarchicalFacetRefined(facet)) {\n      throw new Error(facet + ' is already refined.');\n    }\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(facet + ' is not defined in the hierarchicalFacets attribute of the helper configuration.');\n    }\n    var mod = {};\n    mod[facet] = [path];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n\n  /**\n   * Removes the refinement set on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is not refined\n   */\n  removeHierarchicalFacetRefinement: function(facet) {\n    if (!this.isHierarchicalFacetRefined(facet)) {\n      return this;\n    }\n    var mod = {};\n    mod[facet] = [];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure({}, mod, this.hierarchicalFacetsRefinements)\n    });\n  },\n  /**\n   * Switch the tag refinement\n   * @method\n   * @param {string} tag the tag to remove or add\n   * @return {SearchParameters}\n   */\n  toggleTagRefinement: function toggleTagRefinement(tag) {\n    if (this.isTagRefined(tag)) {\n      return this.removeTagRefinement(tag);\n    }\n\n    return this.addTagRefinement(tag);\n  },\n  /**\n   * Test if the facet name is from one of the disjunctive facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean}\n   */\n  isDisjunctiveFacet: function(facet) {\n    return this.disjunctiveFacets.indexOf(facet) > -1;\n  },\n  /**\n   * Test if the facet name is from one of the hierarchical facets\n   * @method\n   * @param {string} facetName facet name to test\n   * @return {boolean}\n   */\n  isHierarchicalFacet: function(facetName) {\n    return this.getHierarchicalFacetByName(facetName) !== undefined;\n  },\n  /**\n   * Test if the facet name is from one of the conjunctive/normal facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean}\n   */\n  isConjunctiveFacet: function(facet) {\n    return this.facets.indexOf(facet) > -1;\n  },\n  /**\n   * Returns true if the facet is refined, either for a specific value or in\n   * general.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value, optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isFacetRefined: function isFacetRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsRefinements, facet, value);\n  },\n  /**\n   * Returns true if the facet contains exclusions or if a specific value is\n   * excluded.\n   *\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} [value] optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isExcludeRefined: function isExcludeRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsExcludes, facet, value);\n  },\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean}\n   */\n  isDisjunctiveFacetRefined: function isDisjunctiveFacetRefined(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value);\n  },\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean}\n   */\n  isHierarchicalFacetRefined: function isHierarchicalFacetRefined(facet, value) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return false;\n    }\n\n    var refinements = this.getHierarchicalRefinement(facet);\n\n    if (!value) {\n      return refinements.length > 0;\n    }\n\n    return refinements.indexOf(value) !== -1;\n  },\n  /**\n   * Test if the triple (attribute, operator, value) is already refined.\n   * If only the attribute and the operator are provided, it tests if the\n   * contains any refinement value.\n   * @method\n   * @param {string} attribute attribute for which the refinement is applied\n   * @param {string} [operator] operator of the refinement\n   * @param {string} [value] value of the refinement\n   * @return {boolean} true if it is refined\n   */\n  isNumericRefined: function isNumericRefined(attribute, operator, value) {\n    if (value === undefined && operator === undefined) {\n      return !!this.numericRefinements[attribute];\n    }\n\n    var isOperatorDefined =\n      this.numericRefinements[attribute] &&\n      this.numericRefinements[attribute][operator] !== undefined;\n\n    if (value === undefined || !isOperatorDefined) {\n      return isOperatorDefined;\n    }\n\n    var parsedValue = valToNumber(value);\n    var isAttributeValueDefined =\n      findArray(this.numericRefinements[attribute][operator], parsedValue) !==\n      undefined;\n\n    return isOperatorDefined && isAttributeValueDefined;\n  },\n  /**\n   * Returns true if the tag refined, false otherwise\n   * @method\n   * @param {string} tag the tag to check\n   * @return {boolean}\n   */\n  isTagRefined: function isTagRefined(tag) {\n    return this.tagRefinements.indexOf(tag) !== -1;\n  },\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]}\n   */\n  getRefinedDisjunctiveFacets: function getRefinedDisjunctiveFacets() {\n    var self = this;\n\n    // attributes used for numeric filter can also be disjunctive\n    var disjunctiveNumericRefinedFacets = intersection(\n      Object.keys(this.numericRefinements).filter(function(facet) {\n        return Object.keys(self.numericRefinements[facet]).length > 0;\n      }),\n      this.disjunctiveFacets\n    );\n\n    return Object.keys(this.disjunctiveFacetsRefinements).filter(function(facet) {\n      return self.disjunctiveFacetsRefinements[facet].length > 0;\n    })\n      .concat(disjunctiveNumericRefinedFacets)\n      .concat(this.getRefinedHierarchicalFacets());\n  },\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]}\n   */\n  getRefinedHierarchicalFacets: function getRefinedHierarchicalFacets() {\n    var self = this;\n    return intersection(\n      // enforce the order between the two arrays,\n      // so that refinement name index === hierarchical facet index\n      this.hierarchicalFacets.map(function(facet) { return facet.name; }),\n      Object.keys(this.hierarchicalFacetsRefinements).filter(function(facet) {\n        return self.hierarchicalFacetsRefinements[facet].length > 0;\n      })\n    );\n  },\n  /**\n   * Returned the list of all disjunctive facets not refined\n   * @method\n   * @return {string[]}\n   */\n  getUnrefinedDisjunctiveFacets: function() {\n    var refinedFacets = this.getRefinedDisjunctiveFacets();\n\n    return this.disjunctiveFacets.filter(function(f) {\n      return refinedFacets.indexOf(f) === -1;\n    });\n  },\n\n  managedParameters: [\n    'index',\n\n    'facets',\n    'disjunctiveFacets',\n    'facetsRefinements',\n    'hierarchicalFacets',\n    'facetsExcludes',\n\n    'disjunctiveFacetsRefinements',\n    'numericRefinements',\n    'tagRefinements',\n    'hierarchicalFacetsRefinements'\n  ],\n  getQueryParams: function getQueryParams() {\n    var managedParameters = this.managedParameters;\n\n    var queryParams = {};\n\n    var self = this;\n    Object.keys(this).forEach(function(paramName) {\n      var paramValue = self[paramName];\n      if (managedParameters.indexOf(paramName) === -1 && paramValue !== undefined) {\n        queryParams[paramName] = paramValue;\n      }\n    });\n\n    return queryParams;\n  },\n  /**\n   * Let the user set a specific value for a given parameter. Will return the\n   * same instance if the parameter is invalid or if the value is the same as the\n   * previous one.\n   * @method\n   * @param {string} parameter the parameter name\n   * @param {any} value the value to be set, must be compliant with the definition\n   * of the attribute on the object\n   * @return {SearchParameters} the updated state\n   */\n  setQueryParameter: function setParameter(parameter, value) {\n    if (this[parameter] === value) return this;\n\n    var modification = {};\n\n    modification[parameter] = value;\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Let the user set any of the parameters with a plain object.\n   * @method\n   * @param {object} params all the keys and the values to be updated\n   * @return {SearchParameters} a new updated instance\n   */\n  setQueryParameters: function setQueryParameters(params) {\n    if (!params) return this;\n\n    var error = SearchParameters.validate(this, params);\n\n    if (error) {\n      throw error;\n    }\n\n    var self = this;\n    var nextWithNumbers = SearchParameters._parseNumbers(params);\n    var previousPlainObject = Object.keys(this).reduce(function(acc, key) {\n      acc[key] = self[key];\n      return acc;\n    }, {});\n\n    var nextPlainObject = Object.keys(nextWithNumbers).reduce(\n      function(previous, key) {\n        var isPreviousValueDefined = previous[key] !== undefined;\n        var isNextValueDefined = nextWithNumbers[key] !== undefined;\n\n        if (isPreviousValueDefined && !isNextValueDefined) {\n          return omit(previous, [key]);\n        }\n\n        if (isNextValueDefined) {\n          previous[key] = nextWithNumbers[key];\n        }\n\n        return previous;\n      },\n      previousPlainObject\n    );\n\n    return new this.constructor(nextPlainObject);\n  },\n\n  /**\n   * Returns a new instance with the page reset. Two scenarios possible:\n   * the page is omitted -> return the given instance\n   * the page is set -> return a new instance with a page of 0\n   * @return {SearchParameters} a new updated instance\n   */\n  resetPage: function() {\n    if (this.page === undefined) {\n      return this;\n    }\n\n    return this.setPage(0);\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSortBy: function(hierarchicalFacet) {\n    return hierarchicalFacet.sortBy || ['isRefined:desc', 'name:asc'];\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @private\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSeparator: function(hierarchicalFacet) {\n    return hierarchicalFacet.separator || ' > ';\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet prefix path or null\n   * @private\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.rootPath or null as default\n   */\n  _getHierarchicalRootPath: function(hierarchicalFacet) {\n    return hierarchicalFacet.rootPath || null;\n  },\n\n  /**\n   * Helper function to check if we show the parent level of the hierarchicalFacet\n   * @private\n   * @param  {object} hierarchicalFacet\n   * @return {string} returns the hierarchicalFacet.showParentLevel or true as default\n   */\n  _getHierarchicalShowParentLevel: function(hierarchicalFacet) {\n    if (typeof hierarchicalFacet.showParentLevel === 'boolean') {\n      return hierarchicalFacet.showParentLevel;\n    }\n    return true;\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet by it's name\n   * @param  {string} hierarchicalFacetName\n   * @return {object} a hierarchicalFacet\n   */\n  getHierarchicalFacetByName: function(hierarchicalFacetName) {\n    return find(\n      this.hierarchicalFacets,\n      function(f) {\n        return f.name === hierarchicalFacetName;\n      }\n    );\n  },\n\n  /**\n   * Get the current breadcrumb for a hierarchical facet, as an array\n   * @param  {string} facetName Hierarchical facet name\n   * @return {array.<string>} the path as an array of string\n   */\n  getHierarchicalFacetBreadcrumb: function(facetName) {\n    if (!this.isHierarchicalFacet(facetName)) {\n      return [];\n    }\n\n    var refinement = this.getHierarchicalRefinement(facetName)[0];\n    if (!refinement) return [];\n\n    var separator = this._getHierarchicalFacetSeparator(\n      this.getHierarchicalFacetByName(facetName)\n    );\n    var path = refinement.split(separator);\n    return path.map(function(part) {\n      return part.trim();\n    });\n  },\n\n  toString: function() {\n    return JSON.stringify(this, null, 2);\n  }\n};\n\n/**\n * Callback used for clearRefinement method\n * @callback SearchParameters.clearCallback\n * @param {OperatorList|FacetList} value the value of the filter\n * @param {string} key the current attribute name\n * @param {string} type `numeric`, `disjunctiveFacet`, `conjunctiveFacet`, `hierarchicalFacet` or `exclude`\n * depending on the type of facet\n * @return {boolean} `true` if the element should be removed. `false` otherwise.\n */\nmodule.exports = SearchParameters;\n"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,oBAAD,CAAnB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,2BAAD,CAA1B;;AACA,IAAIE,YAAY,GAAGF,OAAO,CAAC,2BAAD,CAA1B;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,mBAAD,CAAlB;;AACA,IAAII,WAAW,GAAGJ,OAAO,CAAC,0BAAD,CAAzB;;AACA,IAAIK,IAAI,GAAGL,OAAO,CAAC,mBAAD,CAAlB;;AACA,IAAIM,aAAa,GAAGN,OAAO,CAAC,4BAAD,CAA3B;;AACA,IAAIO,gBAAgB,GAAGP,OAAO,CAAC,2BAAD,CAA9B;;AAEA,IAAIQ,cAAc,GAAGR,OAAO,CAAC,kBAAD,CAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASS,wBAAT,CAAkCC,CAAlC,EAAqCC,CAArC,EAAwC;EACtC,IAAIC,KAAK,CAACC,OAAN,CAAcH,CAAd,KAAoBE,KAAK,CAACC,OAAN,CAAcF,CAAd,CAAxB,EAA0C;IACxC,OACED,CAAC,CAACI,MAAF,KAAaH,CAAC,CAACG,MAAf,IACAJ,CAAC,CAACK,KAAF,CAAQ,UAASC,EAAT,EAAaC,CAAb,EAAgB;MACtB,OAAOR,wBAAwB,CAACE,CAAC,CAACM,CAAD,CAAF,EAAOD,EAAP,CAA/B;IACD,CAFD,CAFF;EAMD;;EACD,OAAON,CAAC,KAAKC,CAAb;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,SAAT,CAAmBC,KAAnB,EAA0BC,aAA1B,EAAyC;EACvC,OAAOjB,IAAI,CAACgB,KAAD,EAAQ,UAASE,YAAT,EAAuB;IACxC,OAAOZ,wBAAwB,CAACY,YAAD,EAAeD,aAAf,CAA/B;EACD,CAFU,CAAX;AAGD;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,gBAAT,CAA0BC,aAA1B,EAAyC;EACvC,IAAIC,MAAM,GAAGD,aAAa,GAAGD,gBAAgB,CAACG,aAAjB,CAA+BF,aAA/B,CAAH,GAAmD,EAA7E;;EAEA,IAAIC,MAAM,CAACE,SAAP,KAAqBC,SAArB,IAAkC,CAACpB,gBAAgB,CAACiB,MAAM,CAACE,SAAR,CAAvD,EAA2E;IACzEE,OAAO,CAACC,IAAR,CAAa,iIAAb;EACD;EACD;AACF;AACA;AACA;AACA;AACA;;;EACE,KAAKC,MAAL,GAAcN,MAAM,CAACM,MAAP,IAAiB,EAA/B;EACA;AACF;AACA;AACA;AACA;AACA;;EACE,KAAKC,iBAAL,GAAyBP,MAAM,CAACO,iBAAP,IAA4B,EAArD;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,KAAKC,kBAAL,GAA0BR,MAAM,CAACQ,kBAAP,IAA6B,EAAvD,CA5BuC,CA8BvC;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,KAAKC,iBAAL,GAAyBT,MAAM,CAACS,iBAAP,IAA4B,EAArD;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,KAAKC,cAAL,GAAsBV,MAAM,CAACU,cAAP,IAAyB,EAA/C;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,KAAKC,4BAAL,GAAoCX,MAAM,CAACW,4BAAP,IAAuC,EAA3E;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,KAAKC,kBAAL,GAA0BZ,MAAM,CAACY,kBAAP,IAA6B,EAAvD;EACA;AACF;AACA;AACA;AACA;AACA;AACA;;EACE,KAAKC,cAAL,GAAsBb,MAAM,CAACa,cAAP,IAAyB,EAA/C;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,KAAKC,6BAAL,GAAqC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"},"metadata":{},"sourceType":"script"}