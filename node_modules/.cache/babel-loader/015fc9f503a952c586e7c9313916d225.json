{"ast":null,"code":"import createConnector from \"../core/createConnector.js\";\nimport { getResults } from \"../core/indexUtils.js\";\nimport { addAbsolutePositions, addQueryID } from \"../core/utils.js\";\n/**\n * connectHits connector provides the logic to create connected\n * components that will render the results retrieved from\n * Algolia.\n *\n * To configure the number of hits retrieved, use [HitsPerPage widget](widgets/HitsPerPage.html),\n * [connectHitsPerPage connector](connectors/connectHitsPerPage.html) or pass the hitsPerPage\n * prop to a [Configure](guide/Search_parameters.html) widget.\n *\n * **Warning:** you will need to use the **objectID** property available on every hit as a key\n * when iterating over them. This will ensure you have the best possible UI experience\n * especially on slow networks.\n * @name connectHits\n * @kind connector\n * @providedPropType {array.<object>} hits - the records that matched the search state\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, Highlight, connectHits } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n * const CustomHits = connectHits(({ hits }) => (\n *   <div>\n *     {hits.map(hit =>\n *       <p key={hit.objectID}>\n *         <Highlight attribute=\"name\" hit={hit} />\n *       </p>\n *     )}\n *   </div>\n * ));\n *\n * const App = () => (\n *   <InstantSearch\n *     searchClient={searchClient}\n *     indexName=\"instant_search\"\n *   >\n *     <CustomHits />\n *   </InstantSearch>\n * );\n */\n\nexport default createConnector({\n  displayName: 'AlgoliaHits',\n  $$type: 'ais.hits',\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\n    var results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n\n    if (!results) {\n      return {\n        hits: []\n      };\n    }\n\n    var hitsWithPositions = addAbsolutePositions(results.hits, results.hitsPerPage, results.page);\n    var hitsWithPositionsAndQueryID = addQueryID(hitsWithPositions, results.queryID);\n    return {\n      hits: hitsWithPositionsAndQueryID\n    };\n  },\n\n  /**\n   * Hits needs to be considered as a widget to trigger a search,\n   * even if no other widgets are used.\n   *\n   * To be considered as a widget you need either:\n   * - getSearchParameters\n   * - getMetadata\n   * - transitionState\n   *\n   * See: createConnector.tsx\n   */\n  getSearchParameters: function getSearchParameters(searchParameters) {\n    return searchParameters;\n  }\n});","map":{"version":3,"names":["createConnector","getResults","addAbsolutePositions","addQueryID","displayName","$$type","getProvidedProps","props","searchState","searchResults","results","ais","contextValue","multiIndexContext","indexContextValue","hits","hitsWithPositions","hitsPerPage","page","hitsWithPositionsAndQueryID","queryID","getSearchParameters","searchParameters"],"sources":["/home/dedm/Documents/sript/lab3-script/node_modules/react-instantsearch-core/dist/es/connectors/connectHits.js"],"sourcesContent":["import createConnector from \"../core/createConnector.js\";\nimport { getResults } from \"../core/indexUtils.js\";\nimport { addAbsolutePositions, addQueryID } from \"../core/utils.js\";\n/**\n * connectHits connector provides the logic to create connected\n * components that will render the results retrieved from\n * Algolia.\n *\n * To configure the number of hits retrieved, use [HitsPerPage widget](widgets/HitsPerPage.html),\n * [connectHitsPerPage connector](connectors/connectHitsPerPage.html) or pass the hitsPerPage\n * prop to a [Configure](guide/Search_parameters.html) widget.\n *\n * **Warning:** you will need to use the **objectID** property available on every hit as a key\n * when iterating over them. This will ensure you have the best possible UI experience\n * especially on slow networks.\n * @name connectHits\n * @kind connector\n * @providedPropType {array.<object>} hits - the records that matched the search state\n * @example\n * import React from 'react';\n * import algoliasearch from 'algoliasearch/lite';\n * import { InstantSearch, Highlight, connectHits } from 'react-instantsearch-dom';\n *\n * const searchClient = algoliasearch(\n *   'latency',\n *   '6be0576ff61c053d5f9a3225e2a90f76'\n * );\n * const CustomHits = connectHits(({ hits }) => (\n *   <div>\n *     {hits.map(hit =>\n *       <p key={hit.objectID}>\n *         <Highlight attribute=\"name\" hit={hit} />\n *       </p>\n *     )}\n *   </div>\n * ));\n *\n * const App = () => (\n *   <InstantSearch\n *     searchClient={searchClient}\n *     indexName=\"instant_search\"\n *   >\n *     <CustomHits />\n *   </InstantSearch>\n * );\n */\n\nexport default createConnector({\n  displayName: 'AlgoliaHits',\n  $$type: 'ais.hits',\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\n    var results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n\n    if (!results) {\n      return {\n        hits: []\n      };\n    }\n\n    var hitsWithPositions = addAbsolutePositions(results.hits, results.hitsPerPage, results.page);\n    var hitsWithPositionsAndQueryID = addQueryID(hitsWithPositions, results.queryID);\n    return {\n      hits: hitsWithPositionsAndQueryID\n    };\n  },\n\n  /**\n   * Hits needs to be considered as a widget to trigger a search,\n   * even if no other widgets are used.\n   *\n   * To be considered as a widget you need either:\n   * - getSearchParameters\n   * - getMetadata\n   * - transitionState\n   *\n   * See: createConnector.tsx\n   */\n  getSearchParameters: function getSearchParameters(searchParameters) {\n    return searchParameters;\n  }\n});"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,4BAA5B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,oBAAT,EAA+BC,UAA/B,QAAiD,kBAAjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeH,eAAe,CAAC;EAC7BI,WAAW,EAAE,aADgB;EAE7BC,MAAM,EAAE,UAFqB;EAG7BC,gBAAgB,EAAE,SAASA,gBAAT,CAA0BC,KAA1B,EAAiCC,WAAjC,EAA8CC,aAA9C,EAA6D;IAC7E,IAAIC,OAAO,GAAGT,UAAU,CAACQ,aAAD,EAAgB;MACtCE,GAAG,EAAEJ,KAAK,CAACK,YAD2B;MAEtCC,iBAAiB,EAAEN,KAAK,CAACO;IAFa,CAAhB,CAAxB;;IAKA,IAAI,CAACJ,OAAL,EAAc;MACZ,OAAO;QACLK,IAAI,EAAE;MADD,CAAP;IAGD;;IAED,IAAIC,iBAAiB,GAAGd,oBAAoB,CAACQ,OAAO,CAACK,IAAT,EAAeL,OAAO,CAACO,WAAvB,EAAoCP,OAAO,CAACQ,IAA5C,CAA5C;IACA,IAAIC,2BAA2B,GAAGhB,UAAU,CAACa,iBAAD,EAAoBN,OAAO,CAACU,OAA5B,CAA5C;IACA,OAAO;MACLL,IAAI,EAAEI;IADD,CAAP;EAGD,CApB4B;;EAsB7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,mBAAmB,EAAE,SAASA,mBAAT,CAA6BC,gBAA7B,EAA+C;IAClE,OAAOA,gBAAP;EACD;AAnC4B,CAAD,CAA9B"},"metadata":{},"sourceType":"module"}