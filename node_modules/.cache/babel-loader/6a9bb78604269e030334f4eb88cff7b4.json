{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport createConnector from \"../core/createConnector.js\";\nimport { cleanUpValue, refineValue, getCurrentRefinementValue } from \"../core/indexUtils.js\";\nimport { addQueryID, addAbsolutePositions } from \"../core/utils.js\";\n\nvar getId = function getId() {\n  return 'query';\n};\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId();\n  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, '');\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n\n  return '';\n}\n\nfunction getHits(searchResults) {\n  if (searchResults.results) {\n    if (searchResults.results.hits && Array.isArray(searchResults.results.hits)) {\n      return addAbsolutePositions(addQueryID(searchResults.results.hits, searchResults.results.queryID), searchResults.results.hitsPerPage, searchResults.results.page);\n    } else {\n      return Object.keys(searchResults.results).reduce(function (hits, index) {\n        return [].concat(_toConsumableArray(hits), [{\n          index: index,\n          hits: addAbsolutePositions(addQueryID(searchResults.results[index].hits, searchResults.results[index].queryID), searchResults.results[index].hitsPerPage, searchResults.results[index].page)\n        }]);\n      }, []);\n    }\n  } else {\n    return [];\n  }\n}\n\nfunction _refine(props, searchState, nextRefinement, context) {\n  var id = getId();\n\n  var nextValue = _defineProperty({}, id, nextRefinement);\n\n  var resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\n\nfunction _cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, getId());\n}\n/**\n * connectAutoComplete connector provides the logic to create connected\n * components that will render the results retrieved from\n * Algolia.\n *\n * To configure the number of hits retrieved, use [HitsPerPage widget](widgets/HitsPerPage.html),\n * [connectHitsPerPage connector](connectors/connectHitsPerPage.html) or pass the hitsPerPage\n * prop to a [Configure](guide/Search_parameters.html) widget.\n * @name connectAutoComplete\n * @kind connector\n * @propType {string} [defaultRefinement] - Provide a default value for the query\n * @providedPropType {array.<object>} hits - the records that matched the search state\n * @providedPropType {function} refine - a function to change the query\n * @providedPropType {string} currentRefinement - the query to search for\n */\n\n\nexport default createConnector({\n  displayName: 'AlgoliaAutoComplete',\n  $$type: 'ais.autoComplete',\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\n    return {\n      hits: getHits(searchResults),\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      })\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    return _refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return _cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n\n  /**\n   * AutoComplete needs to be considered as a widget to trigger a search,\n   * even if no other widgets are used.\n   *\n   * To be considered as a widget you need either:\n   * - getSearchParameters\n   * - getMetadata\n   * - transitionState\n   *\n   * See: createConnector.tsx\n   */\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQuery(getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }));\n  }\n});","map":{"version":3,"names":["_defineProperty","_toConsumableArray","createConnector","cleanUpValue","refineValue","getCurrentRefinementValue","addQueryID","addAbsolutePositions","getId","getCurrentRefinement","props","searchState","context","id","currentRefinement","getHits","searchResults","results","hits","Array","isArray","queryID","hitsPerPage","page","Object","keys","reduce","index","concat","_refine","nextRefinement","nextValue","resetPage","_cleanUp","displayName","$$type","getProvidedProps","ais","contextValue","multiIndexContext","indexContextValue","refine","cleanUp","getSearchParameters","searchParameters","setQuery"],"sources":["/home/dedm/Documents/sript/lab3-script/node_modules/react-instantsearch-core/dist/es/connectors/connectAutoComplete.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport createConnector from \"../core/createConnector.js\";\nimport { cleanUpValue, refineValue, getCurrentRefinementValue } from \"../core/indexUtils.js\";\nimport { addQueryID, addAbsolutePositions } from \"../core/utils.js\";\n\nvar getId = function getId() {\n  return 'query';\n};\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId();\n  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, '');\n\n  if (currentRefinement) {\n    return currentRefinement;\n  }\n\n  return '';\n}\n\nfunction getHits(searchResults) {\n  if (searchResults.results) {\n    if (searchResults.results.hits && Array.isArray(searchResults.results.hits)) {\n      return addAbsolutePositions(addQueryID(searchResults.results.hits, searchResults.results.queryID), searchResults.results.hitsPerPage, searchResults.results.page);\n    } else {\n      return Object.keys(searchResults.results).reduce(function (hits, index) {\n        return [].concat(_toConsumableArray(hits), [{\n          index: index,\n          hits: addAbsolutePositions(addQueryID(searchResults.results[index].hits, searchResults.results[index].queryID), searchResults.results[index].hitsPerPage, searchResults.results[index].page)\n        }]);\n      }, []);\n    }\n  } else {\n    return [];\n  }\n}\n\nfunction _refine(props, searchState, nextRefinement, context) {\n  var id = getId();\n\n  var nextValue = _defineProperty({}, id, nextRefinement);\n\n  var resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\n\nfunction _cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, getId());\n}\n/**\n * connectAutoComplete connector provides the logic to create connected\n * components that will render the results retrieved from\n * Algolia.\n *\n * To configure the number of hits retrieved, use [HitsPerPage widget](widgets/HitsPerPage.html),\n * [connectHitsPerPage connector](connectors/connectHitsPerPage.html) or pass the hitsPerPage\n * prop to a [Configure](guide/Search_parameters.html) widget.\n * @name connectAutoComplete\n * @kind connector\n * @propType {string} [defaultRefinement] - Provide a default value for the query\n * @providedPropType {array.<object>} hits - the records that matched the search state\n * @providedPropType {function} refine - a function to change the query\n * @providedPropType {string} currentRefinement - the query to search for\n */\n\n\nexport default createConnector({\n  displayName: 'AlgoliaAutoComplete',\n  $$type: 'ais.autoComplete',\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\n    return {\n      hits: getHits(searchResults),\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      })\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    return _refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return _cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n\n  /**\n   * AutoComplete needs to be considered as a widget to trigger a search,\n   * even if no other widgets are used.\n   *\n   * To be considered as a widget you need either:\n   * - getSearchParameters\n   * - getMetadata\n   * - transitionState\n   *\n   * See: createConnector.tsx\n   */\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQuery(getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    }));\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}