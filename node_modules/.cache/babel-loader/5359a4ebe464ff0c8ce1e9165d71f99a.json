{"ast":null,"code":"'use strict';\n/**\n * Functions to manipulate refinement lists\n *\n * The RefinementList is not formally defined through a prototype but is based\n * on a specific structure.\n *\n * @module SearchParameters.refinementList\n *\n * @typedef {string[]} SearchParameters.refinementList.Refinements\n * @typedef {Object.<string, SearchParameters.refinementList.Refinements>} SearchParameters.refinementList.RefinementList\n */\n\nvar defaultsPure = require('../functions/defaultsPure');\n\nvar omit = require('../functions/omit');\n\nvar objectHasKeys = require('../functions/objectHasKeys');\n\nvar lib = {\n  /**\n   * Adds a refinement to a RefinementList\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement, if the value is not a string it will be converted\n   * @return {RefinementList} a new and updated refinement list\n   */\n  addRefinement: function addRefinement(refinementList, attribute, value) {\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return refinementList;\n    }\n\n    var valueAsString = '' + value;\n    var facetRefinement = !refinementList[attribute] ? [valueAsString] : refinementList[attribute].concat(valueAsString);\n    var mod = {};\n    mod[attribute] = facetRefinement;\n    return defaultsPure({}, mod, refinementList);\n  },\n\n  /**\n   * Removes refinement(s) for an attribute:\n   *  - if the value is specified removes the refinement for the value on the attribute\n   *  - if no value is specified removes all the refinements for this attribute\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} [value] the value of the refinement\n   * @return {RefinementList} a new and updated refinement lst\n   */\n  removeRefinement: function removeRefinement(refinementList, attribute, value) {\n    if (value === undefined) {\n      // we use the \"filter\" form of clearRefinement, since it leaves empty values as-is\n      // the form with a string will remove the attribute completely\n      return lib.clearRefinement(refinementList, function (v, f) {\n        return attribute === f;\n      });\n    }\n\n    var valueAsString = '' + value;\n    return lib.clearRefinement(refinementList, function (v, f) {\n      return attribute === f && valueAsString === v;\n    });\n  },\n\n  /**\n   * Toggles the refinement value for an attribute.\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement\n   * @return {RefinementList} a new and updated list\n   */\n  toggleRefinement: function toggleRefinement(refinementList, attribute, value) {\n    if (value === undefined) throw new Error('toggleRefinement should be used with a value');\n\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return lib.removeRefinement(refinementList, attribute, value);\n    }\n\n    return lib.addRefinement(refinementList, attribute, value);\n  },\n\n  /**\n   * Clear all or parts of a RefinementList. Depending on the arguments, three\n   * kinds of behavior can happen:\n   *  - if no attribute is provided: clears the whole list\n   *  - if an attribute is provided as a string: clears the list for the specific attribute\n   *  - if an attribute is provided as a function: discards the elements for which the function returns true\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} [attribute] the attribute or function to discard\n   * @param {string} [refinementType] optional parameter to give more context to the attribute function\n   * @return {RefinementList} a new and updated refinement list\n   */\n  clearRefinement: function clearRefinement(refinementList, attribute, refinementType) {\n    if (attribute === undefined) {\n      if (!objectHasKeys(refinementList)) {\n        return refinementList;\n      }\n\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(refinementList, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n      var newRefinementList = Object.keys(refinementList).reduce(function (memo, key) {\n        var values = refinementList[key] || [];\n        var facetList = values.filter(function (value) {\n          return !attribute(value, key, refinementType);\n        });\n\n        if (facetList.length !== values.length) {\n          hasChanged = true;\n        }\n\n        memo[key] = facetList;\n        return memo;\n      }, {});\n      if (hasChanged) return newRefinementList;\n      return refinementList;\n    }\n  },\n\n  /**\n   * Test if the refinement value is used for the attribute. If no refinement value\n   * is provided, test if the refinementList contains any refinement for the\n   * given attribute.\n   * @param {RefinementList} refinementList the list of refinement\n   * @param {string} attribute name of the attribute\n   * @param {string} [refinementValue] value of the filter/refinement\n   * @return {boolean}\n   */\n  isRefined: function isRefined(refinementList, attribute, refinementValue) {\n    var containsRefinements = !!refinementList[attribute] && refinementList[attribute].length > 0;\n\n    if (refinementValue === undefined || !containsRefinements) {\n      return containsRefinements;\n    }\n\n    var refinementValueAsString = '' + refinementValue;\n    return refinementList[attribute].indexOf(refinementValueAsString) !== -1;\n  }\n};\nmodule.exports = lib;","map":{"version":3,"names":["defaultsPure","require","omit","objectHasKeys","lib","addRefinement","refinementList","attribute","value","isRefined","valueAsString","facetRefinement","concat","mod","removeRefinement","undefined","clearRefinement","v","f","toggleRefinement","Error","refinementType","hasChanged","newRefinementList","Object","keys","reduce","memo","key","values","facetList","filter","length","refinementValue","containsRefinements","refinementValueAsString","indexOf","module","exports"],"sources":["/home/dedm/Documents/sript/lab3-script/node_modules/algoliasearch-helper/src/SearchParameters/RefinementList.js"],"sourcesContent":["'use strict';\n\n/**\n * Functions to manipulate refinement lists\n *\n * The RefinementList is not formally defined through a prototype but is based\n * on a specific structure.\n *\n * @module SearchParameters.refinementList\n *\n * @typedef {string[]} SearchParameters.refinementList.Refinements\n * @typedef {Object.<string, SearchParameters.refinementList.Refinements>} SearchParameters.refinementList.RefinementList\n */\n\nvar defaultsPure = require('../functions/defaultsPure');\nvar omit = require('../functions/omit');\nvar objectHasKeys = require('../functions/objectHasKeys');\n\nvar lib = {\n  /**\n   * Adds a refinement to a RefinementList\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement, if the value is not a string it will be converted\n   * @return {RefinementList} a new and updated refinement list\n   */\n  addRefinement: function addRefinement(refinementList, attribute, value) {\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return refinementList;\n    }\n\n    var valueAsString = '' + value;\n\n    var facetRefinement = !refinementList[attribute] ?\n      [valueAsString] :\n      refinementList[attribute].concat(valueAsString);\n\n    var mod = {};\n\n    mod[attribute] = facetRefinement;\n\n    return defaultsPure({}, mod, refinementList);\n  },\n  /**\n   * Removes refinement(s) for an attribute:\n   *  - if the value is specified removes the refinement for the value on the attribute\n   *  - if no value is specified removes all the refinements for this attribute\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} [value] the value of the refinement\n   * @return {RefinementList} a new and updated refinement lst\n   */\n  removeRefinement: function removeRefinement(refinementList, attribute, value) {\n    if (value === undefined) {\n      // we use the \"filter\" form of clearRefinement, since it leaves empty values as-is\n      // the form with a string will remove the attribute completely\n      return lib.clearRefinement(refinementList, function(v, f) {\n        return attribute === f;\n      });\n    }\n\n    var valueAsString = '' + value;\n\n    return lib.clearRefinement(refinementList, function(v, f) {\n      return attribute === f && valueAsString === v;\n    });\n  },\n  /**\n   * Toggles the refinement value for an attribute.\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement\n   * @return {RefinementList} a new and updated list\n   */\n  toggleRefinement: function toggleRefinement(refinementList, attribute, value) {\n    if (value === undefined) throw new Error('toggleRefinement should be used with a value');\n\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return lib.removeRefinement(refinementList, attribute, value);\n    }\n\n    return lib.addRefinement(refinementList, attribute, value);\n  },\n  /**\n   * Clear all or parts of a RefinementList. Depending on the arguments, three\n   * kinds of behavior can happen:\n   *  - if no attribute is provided: clears the whole list\n   *  - if an attribute is provided as a string: clears the list for the specific attribute\n   *  - if an attribute is provided as a function: discards the elements for which the function returns true\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} [attribute] the attribute or function to discard\n   * @param {string} [refinementType] optional parameter to give more context to the attribute function\n   * @return {RefinementList} a new and updated refinement list\n   */\n  clearRefinement: function clearRefinement(refinementList, attribute, refinementType) {\n    if (attribute === undefined) {\n      if (!objectHasKeys(refinementList)) {\n        return refinementList;\n      }\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(refinementList, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n\n      var newRefinementList = Object.keys(refinementList).reduce(function(memo, key) {\n        var values = refinementList[key] || [];\n        var facetList = values.filter(function(value) {\n          return !attribute(value, key, refinementType);\n        });\n\n        if (facetList.length !== values.length) {\n          hasChanged = true;\n        }\n        memo[key] = facetList;\n\n        return memo;\n      }, {});\n\n      if (hasChanged) return newRefinementList;\n      return refinementList;\n    }\n  },\n  /**\n   * Test if the refinement value is used for the attribute. If no refinement value\n   * is provided, test if the refinementList contains any refinement for the\n   * given attribute.\n   * @param {RefinementList} refinementList the list of refinement\n   * @param {string} attribute name of the attribute\n   * @param {string} [refinementValue] value of the filter/refinement\n   * @return {boolean}\n   */\n  isRefined: function isRefined(refinementList, attribute, refinementValue) {\n    var containsRefinements = !!refinementList[attribute] &&\n      refinementList[attribute].length > 0;\n\n    if (refinementValue === undefined || !containsRefinements) {\n      return containsRefinements;\n    }\n\n    var refinementValueAsString = '' + refinementValue;\n\n    return refinementList[attribute].indexOf(refinementValueAsString) !== -1;\n  }\n};\n\nmodule.exports = lib;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}