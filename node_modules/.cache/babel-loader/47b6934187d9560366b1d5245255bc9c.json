{"ast":null,"code":"'use strict';\n\nvar merge = require('../functions/merge');\n\nvar defaultsPure = require('../functions/defaultsPure');\n\nvar orderBy = require('../functions/orderBy');\n\nvar compact = require('../functions/compact');\n\nvar find = require('../functions/find');\n\nvar findIndex = require('../functions/findIndex');\n\nvar formatSort = require('../functions/formatSort');\n\nvar fv = require('../functions/escapeFacetValue');\n\nvar escapeFacetValue = fv.escapeFacetValue;\nvar unescapeFacetValue = fv.unescapeFacetValue;\n\nvar generateHierarchicalTree = require('./generate-hierarchical-tree');\n/**\n * @typedef SearchResults.Facet\n * @type {object}\n * @property {string} name name of the attribute in the record\n * @property {object} data the faceting data: value, number of entries\n * @property {object} stats undefined unless facet_stats is retrieved from algolia\n */\n\n/**\n * @typedef SearchResults.HierarchicalFacet\n * @type {object}\n * @property {string} name name of the current value given the hierarchical level, trimmed.\n * If root node, you get the facet name\n * @property {number} count number of objects matching this hierarchical value\n * @property {string} path the current hierarchical value full path\n * @property {boolean} isRefined `true` if the current value was refined, `false` otherwise\n * @property {HierarchicalFacet[]} data sub values for the current level\n */\n\n/**\n * @typedef SearchResults.FacetValue\n * @type {object}\n * @property {string} name the facet value itself\n * @property {number} count times this facet appears in the results\n * @property {boolean} isRefined is the facet currently selected\n * @property {boolean} isExcluded is the facet currently excluded (only for conjunctive facets)\n */\n\n/**\n * @typedef Refinement\n * @type {object}\n * @property {string} type the type of filter used:\n * `numeric`, `facet`, `exclude`, `disjunctive`, `hierarchical`\n * @property {string} attributeName name of the attribute used for filtering\n * @property {string} name the value of the filter\n * @property {number} numericValue the value as a number. Only for numeric filters.\n * @property {string} operator the operator used. Only for numeric filters.\n * @property {number} count the number of computed hits for this filter. Only on facets.\n * @property {boolean} exhaustive if the count is exhaustive\n */\n\n/**\n * @param {string[]} attributes\n */\n\n\nfunction getIndices(attributes) {\n  var indices = {};\n  attributes.forEach(function (val, idx) {\n    indices[val] = idx;\n  });\n  return indices;\n}\n\nfunction assignFacetStats(dest, facetStats, key) {\n  if (facetStats && facetStats[key]) {\n    dest.stats = facetStats[key];\n  }\n}\n/**\n * @typedef {Object} HierarchicalFacet\n * @property {string} name\n * @property {string[]} attributes\n */\n\n/**\n * @param {HierarchicalFacet[]} hierarchicalFacets\n * @param {string} hierarchicalAttributeName\n */\n\n\nfunction findMatchingHierarchicalFacetFromAttributeName(hierarchicalFacets, hierarchicalAttributeName) {\n  return find(hierarchicalFacets, function facetKeyMatchesAttribute(hierarchicalFacet) {\n    var facetNames = hierarchicalFacet.attributes || [];\n    return facetNames.indexOf(hierarchicalAttributeName) > -1;\n  });\n}\n/*eslint-disable */\n\n/**\n * Constructor for SearchResults\n * @class\n * @classdesc SearchResults contains the results of a query to Algolia using the\n * {@link AlgoliaSearchHelper}.\n * @param {SearchParameters} state state that led to the response\n * @param {array.<object>} results the results from algolia client\n * @example <caption>SearchResults of the first query in\n * <a href=\"http://demos.algolia.com/instant-search-demo\">the instant search demo</a></caption>\n{\n   \"hitsPerPage\": 10,\n   \"processingTimeMS\": 2,\n   \"facets\": [\n      {\n         \"name\": \"type\",\n         \"data\": {\n            \"HardGood\": 6627,\n            \"BlackTie\": 550,\n            \"Music\": 665,\n            \"Software\": 131,\n            \"Game\": 456,\n            \"Movie\": 1571\n         },\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"Free shipping\": 5507\n         },\n         \"name\": \"shipping\"\n      }\n  ],\n   \"hits\": [\n      {\n         \"thumbnailImage\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_54x108_s.gif\",\n         \"_highlightResult\": {\n            \"shortDescription\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n               \"matchedWords\": []\n            },\n            \"category\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Computer Security Software\",\n               \"matchedWords\": []\n            },\n            \"manufacturer\": {\n               \"matchedWords\": [],\n               \"value\": \"Webroot\",\n               \"matchLevel\": \"none\"\n            },\n            \"name\": {\n               \"value\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n               \"matchedWords\": [],\n               \"matchLevel\": \"none\"\n            }\n         },\n         \"image\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_105x210_sc.jpg\",\n         \"shipping\": \"Free shipping\",\n         \"bestSellingRank\": 4,\n         \"shortDescription\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n         \"url\": \"http://www.bestbuy.com/site/webroot-secureanywhere-internet-security-3-devi…d=1219060687969&skuId=1688832&cmp=RMX&ky=2d3GfEmNIzjA0vkzveHdZEBgpPCyMnLTJ\",\n         \"name\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n         \"category\": \"Computer Security Software\",\n         \"salePrice_range\": \"1 - 50\",\n         \"objectID\": \"1688832\",\n         \"type\": \"Software\",\n         \"customerReviewCount\": 5980,\n         \"salePrice\": 49.99,\n         \"manufacturer\": \"Webroot\"\n      },\n      ....\n  ],\n   \"nbHits\": 10000,\n   \"disjunctiveFacets\": [\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"5\": 183,\n            \"12\": 112,\n            \"7\": 149,\n            ...\n         },\n         \"name\": \"customerReviewCount\",\n         \"stats\": {\n            \"max\": 7461,\n            \"avg\": 157.939,\n            \"min\": 1\n         }\n      },\n      {\n         \"data\": {\n            \"Printer Ink\": 142,\n            \"Wireless Speakers\": 60,\n            \"Point & Shoot Cameras\": 48,\n            ...\n         },\n         \"name\": \"category\",\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"> 5000\": 2,\n            \"1 - 50\": 6524,\n            \"501 - 2000\": 566,\n            \"201 - 500\": 1501,\n            \"101 - 200\": 1360,\n            \"2001 - 5000\": 47\n         },\n         \"name\": \"salePrice_range\"\n      },\n      {\n         \"data\": {\n            \"Dynex™\": 202,\n            \"Insignia™\": 230,\n            \"PNY\": 72,\n            ...\n         },\n         \"name\": \"manufacturer\",\n         \"exhaustive\": false\n      }\n  ],\n   \"query\": \"\",\n   \"nbPages\": 100,\n   \"page\": 0,\n   \"index\": \"bestbuy\"\n}\n **/\n\n/*eslint-enable */\n\n\nfunction SearchResults(state, results, options) {\n  var mainSubResponse = results[0];\n  this._rawResults = results;\n  var self = this; // https://www.algolia.com/doc/api-reference/api-methods/search/#response\n\n  Object.keys(mainSubResponse).forEach(function (key) {\n    self[key] = mainSubResponse[key];\n  }); // Make every key of the result options reachable from the instance\n\n  Object.keys(options || {}).forEach(function (key) {\n    self[key] = options[key];\n  });\n  /**\n   * query used to generate the results\n   * @name query\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n\n  /**\n   * The query as parsed by the engine given all the rules.\n   * @name parsedQuery\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n\n  /**\n   * all the records that match the search parameters. Each record is\n   * augmented with a new attribute `_highlightResult`\n   * which is an object keyed by attribute and with the following properties:\n   *  - `value` : the value of the facet highlighted (html)\n   *  - `matchLevel`: full, partial or none depending on how the query terms match\n   * @name hits\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */\n\n  /**\n   * index where the results come from\n   * @name index\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n\n  /**\n   * number of hits per page requested\n   * @name hitsPerPage\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n\n  /**\n   * total number of hits of this query on the index\n   * @name nbHits\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n\n  /**\n   * total number of pages with respect to the number of hits per page and the total number of hits\n   * @name nbPages\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n\n  /**\n   * current page\n   * @name page\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n\n  /**\n   * The position if the position was guessed by IP.\n   * @name aroundLatLng\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"48.8637,2.3615\",\n   */\n\n  /**\n   * The radius computed by Algolia.\n   * @name automaticRadius\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"126792922\",\n   */\n\n  /**\n   * String identifying the server used to serve this request.\n   *\n   * getRankingInfo needs to be set to `true` for this to be returned\n   *\n   * @name serverUsed\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"c7-use-2.algolia.net\",\n   */\n\n  /**\n   * Boolean that indicates if the computation of the counts did time out.\n   * @deprecated\n   * @name timeoutCounts\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n\n  /**\n   * Boolean that indicates if the computation of the hits did time out.\n   * @deprecated\n   * @name timeoutHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n\n  /**\n   * True if the counts of the facets is exhaustive\n   * @name exhaustiveFacetsCount\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n\n  /**\n   * True if the number of hits is exhaustive\n   * @name exhaustiveNbHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n\n  /**\n   * Contains the userData if they are set by a [query rule](https://www.algolia.com/doc/guides/query-rules/query-rules-overview/).\n   * @name userData\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */\n\n  /**\n   * queryID is the unique identifier of the query used to generate the current search results.\n   * This value is only available if the `clickAnalytics` search parameter is set to `true`.\n   * @name queryID\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n\n  /**\n   * sum of the processing time of all the queries\n   * @member {number}\n   */\n\n  this.processingTimeMS = results.reduce(function (sum, result) {\n    return result.processingTimeMS === undefined ? sum : sum + result.processingTimeMS;\n  }, 0);\n  /**\n   * disjunctive facets results\n   * @member {SearchResults.Facet[]}\n   */\n\n  this.disjunctiveFacets = [];\n  /**\n   * disjunctive facets results\n   * @member {SearchResults.HierarchicalFacet[]}\n   */\n\n  this.hierarchicalFacets = state.hierarchicalFacets.map(function initFutureTree() {\n    return [];\n  });\n  /**\n   * other facets results\n   * @member {SearchResults.Facet[]}\n   */\n\n  this.facets = [];\n  var disjunctiveFacets = state.getRefinedDisjunctiveFacets();\n  var facetsIndices = getIndices(state.facets);\n  var disjunctiveFacetsIndices = getIndices(state.disjunctiveFacets);\n  var nextDisjunctiveResult = 1; // Since we send request only for disjunctive facets that have been refined,\n  // we get the facets information from the first, general, response.\n\n  var mainFacets = mainSubResponse.facets || {};\n  Object.keys(mainFacets).forEach(function (facetKey) {\n    var facetValueObject = mainFacets[facetKey];\n    var hierarchicalFacet = findMatchingHierarchicalFacetFromAttributeName(state.hierarchicalFacets, facetKey);\n\n    if (hierarchicalFacet) {\n      // Place the hierarchicalFacet data at the correct index depending on\n      // the attributes order that was defined at the helper initialization\n      var facetIndex = hierarchicalFacet.attributes.indexOf(facetKey);\n      var idxAttributeName = findIndex(state.hierarchicalFacets, function (f) {\n        return f.name === hierarchicalFacet.name;\n      });\n      self.hierarchicalFacets[idxAttributeName][facetIndex] = {\n        attribute: facetKey,\n        data: facetValueObject,\n        exhaustive: mainSubResponse.exhaustiveFacetsCount\n      };\n    } else {\n      var isFacetDisjunctive = state.disjunctiveFacets.indexOf(facetKey) !== -1;\n      var isFacetConjunctive = state.facets.indexOf(facetKey) !== -1;\n      var position;\n\n      if (isFacetDisjunctive) {\n        position = disjunctiveFacetsIndices[facetKey];\n        self.disjunctiveFacets[position] = {\n          name: facetKey,\n          data: facetValueObject,\n          exhaustive: mainSubResponse.exhaustiveFacetsCount\n        };\n        assignFacetStats(self.disjunctiveFacets[position], mainSubResponse.facets_stats, facetKey);\n      }\n\n      if (isFacetConjunctive) {\n        position = facetsIndices[facetKey];\n        self.facets[position] = {\n          name: facetKey,\n          data: facetValueObject,\n          exhaustive: mainSubResponse.exhaustiveFacetsCount\n        };\n        assignFacetStats(self.facets[position], mainSubResponse.facets_stats, facetKey);\n      }\n    }\n  }); // Make sure we do not keep holes within the hierarchical facets\n\n  this.hierarchicalFacets = compact(this.hierarchicalFacets); // aggregate the refined disjunctive facets\n\n  disjunctiveFacets.forEach(function (disjunctiveFacet) {\n    var result = results[nextDisjunctiveResult];\n    var facets = result && result.facets ? result.facets : {};\n    var hierarchicalFacet = state.getHierarchicalFacetByName(disjunctiveFacet); // There should be only item in facets.\n\n    Object.keys(facets).forEach(function (dfacet) {\n      var facetResults = facets[dfacet];\n      var position;\n\n      if (hierarchicalFacet) {\n        position = findIndex(state.hierarchicalFacets, function (f) {\n          return f.name === hierarchicalFacet.name;\n        });\n        var attributeIndex = findIndex(self.hierarchicalFacets[position], function (f) {\n          return f.attribute === dfacet;\n        }); // previous refinements and no results so not able to find it\n\n        if (attributeIndex === -1) {\n          return;\n        }\n\n        self.hierarchicalFacets[position][attributeIndex].data = merge({}, self.hierarchicalFacets[position][attributeIndex].data, facetResults);\n      } else {\n        position = disjunctiveFacetsIndices[dfacet];\n        var dataFromMainRequest = mainSubResponse.facets && mainSubResponse.facets[dfacet] || {};\n        self.disjunctiveFacets[position] = {\n          name: dfacet,\n          data: defaultsPure({}, facetResults, dataFromMainRequest),\n          exhaustive: result.exhaustiveFacetsCount\n        };\n        assignFacetStats(self.disjunctiveFacets[position], result.facets_stats, dfacet);\n\n        if (state.disjunctiveFacetsRefinements[dfacet]) {\n          state.disjunctiveFacetsRefinements[dfacet].forEach(function (refinementValue) {\n            // add the disjunctive refinements if it is no more retrieved\n            if (!self.disjunctiveFacets[position].data[refinementValue] && state.disjunctiveFacetsRefinements[dfacet].indexOf(unescapeFacetValue(refinementValue)) > -1) {\n              self.disjunctiveFacets[position].data[refinementValue] = 0;\n            }\n          });\n        }\n      }\n    });\n    nextDisjunctiveResult++;\n  }); // if we have some root level values for hierarchical facets, merge them\n\n  state.getRefinedHierarchicalFacets().forEach(function (refinedFacet) {\n    var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n    var currentRefinement = state.getHierarchicalRefinement(refinedFacet); // if we are already at a root refinement (or no refinement at all), there is no\n    // root level values request\n\n    if (currentRefinement.length === 0 || currentRefinement[0].split(separator).length < 2) {\n      return;\n    }\n\n    var result = results[nextDisjunctiveResult];\n    var facets = result && result.facets ? result.facets : {};\n    Object.keys(facets).forEach(function (dfacet) {\n      var facetResults = facets[dfacet];\n      var position = findIndex(state.hierarchicalFacets, function (f) {\n        return f.name === hierarchicalFacet.name;\n      });\n      var attributeIndex = findIndex(self.hierarchicalFacets[position], function (f) {\n        return f.attribute === dfacet;\n      }); // previous refinements and no results so not able to find it\n\n      if (attributeIndex === -1) {\n        return;\n      } // when we always get root levels, if the hits refinement is `beers > IPA` (count: 5),\n      // then the disjunctive values will be `beers` (count: 100),\n      // but we do not want to display\n      //   | beers (100)\n      //     > IPA (5)\n      // We want\n      //   | beers (5)\n      //     > IPA (5)\n\n\n      var defaultData = {};\n\n      if (currentRefinement.length > 0) {\n        var root = currentRefinement[0].split(separator)[0];\n        defaultData[root] = self.hierarchicalFacets[position][attributeIndex].data[root];\n      }\n\n      self.hierarchicalFacets[position][attributeIndex].data = defaultsPure(defaultData, facetResults, self.hierarchicalFacets[position][attributeIndex].data);\n    });\n    nextDisjunctiveResult++;\n  }); // add the excludes\n\n  Object.keys(state.facetsExcludes).forEach(function (facetName) {\n    var excludes = state.facetsExcludes[facetName];\n    var position = facetsIndices[facetName];\n    self.facets[position] = {\n      name: facetName,\n      data: mainSubResponse.facets[facetName],\n      exhaustive: mainSubResponse.exhaustiveFacetsCount\n    };\n    excludes.forEach(function (facetValue) {\n      self.facets[position] = self.facets[position] || {\n        name: facetName\n      };\n      self.facets[position].data = self.facets[position].data || {};\n      self.facets[position].data[facetValue] = 0;\n    });\n  });\n  /**\n   * @type {Array}\n   */\n\n  this.hierarchicalFacets = this.hierarchicalFacets.map(generateHierarchicalTree(state));\n  /**\n   * @type {Array}\n   */\n\n  this.facets = compact(this.facets);\n  /**\n   * @type {Array}\n   */\n\n  this.disjunctiveFacets = compact(this.disjunctiveFacets);\n  this._state = state;\n}\n/**\n * Get a facet object with its name\n * @deprecated\n * @param {string} name name of the faceted attribute\n * @return {SearchResults.Facet} the facet object\n */\n\n\nSearchResults.prototype.getFacetByName = function (name) {\n  function predicate(facet) {\n    return facet.name === name;\n  }\n\n  return find(this.facets, predicate) || find(this.disjunctiveFacets, predicate) || find(this.hierarchicalFacets, predicate);\n};\n/**\n * Get the facet values of a specified attribute from a SearchResults object.\n * @private\n * @param {SearchResults} results the search results to search in\n * @param {string} attribute name of the faceted attribute to search for\n * @return {array|object} facet values. For the hierarchical facets it is an object.\n */\n\n\nfunction extractNormalizedFacetValues(results, attribute) {\n  function predicate(facet) {\n    return facet.name === attribute;\n  }\n\n  if (results._state.isConjunctiveFacet(attribute)) {\n    var facet = find(results.facets, predicate);\n    if (!facet) return [];\n    return Object.keys(facet.data).map(function (name) {\n      var value = escapeFacetValue(name);\n      return {\n        name: name,\n        escapedValue: value,\n        count: facet.data[name],\n        isRefined: results._state.isFacetRefined(attribute, value),\n        isExcluded: results._state.isExcludeRefined(attribute, name)\n      };\n    });\n  } else if (results._state.isDisjunctiveFacet(attribute)) {\n    var disjunctiveFacet = find(results.disjunctiveFacets, predicate);\n    if (!disjunctiveFacet) return [];\n    return Object.keys(disjunctiveFacet.data).map(function (name) {\n      var value = escapeFacetValue(name);\n      return {\n        name: name,\n        escapedValue: value,\n        count: disjunctiveFacet.data[name],\n        isRefined: results._state.isDisjunctiveFacetRefined(attribute, value)\n      };\n    });\n  } else if (results._state.isHierarchicalFacet(attribute)) {\n    return find(results.hierarchicalFacets, predicate);\n  }\n}\n/**\n * Sort nodes of a hierarchical or disjunctive facet results\n * @private\n * @param {function} sortFn\n * @param {HierarchicalFacet|Array} node node upon which we want to apply the sort\n * @param {string[]} names attribute names\n * @param {number} [level=0] current index in the names array\n */\n\n\nfunction recSort(sortFn, node, names, level) {\n  level = level || 0;\n\n  if (Array.isArray(node)) {\n    return sortFn(node, names[level]);\n  }\n\n  if (!node.data || node.data.length === 0) {\n    return node;\n  }\n\n  var children = node.data.map(function (childNode) {\n    return recSort(sortFn, childNode, names, level + 1);\n  });\n  var sortedChildren = sortFn(children, names[level]);\n  var newNode = defaultsPure({\n    data: sortedChildren\n  }, node);\n  return newNode;\n}\n\nSearchResults.DEFAULT_SORT = ['isRefined:desc', 'count:desc', 'name:asc'];\n\nfunction vanillaSortFn(order, data) {\n  return data.sort(order);\n}\n/**\n * @typedef FacetOrdering\n * @type {Object}\n * @property {string[]} [order]\n * @property {'count' | 'alpha' | 'hidden'} [sortRemainingBy]\n */\n\n/**\n * Sorts facet arrays via their facet ordering\n * @param {Array} facetValues the values\n * @param {FacetOrdering} facetOrdering the ordering\n * @returns {Array}\n */\n\n\nfunction sortViaFacetOrdering(facetValues, facetOrdering) {\n  var orderedFacets = [];\n  var remainingFacets = [];\n  var order = facetOrdering.order || [];\n  /**\n   * an object with the keys being the values in order, the values their index:\n   * ['one', 'two'] -> { one: 0, two: 1 }\n   */\n\n  var reverseOrder = order.reduce(function (acc, name, i) {\n    acc[name] = i;\n    return acc;\n  }, {});\n  facetValues.forEach(function (item) {\n    // hierarchical facets get sorted using their raw name\n    var name = item.path || item.name;\n\n    if (reverseOrder[name] !== undefined) {\n      orderedFacets[reverseOrder[name]] = item;\n    } else {\n      remainingFacets.push(item);\n    }\n  });\n  orderedFacets = orderedFacets.filter(function (facet) {\n    return facet;\n  });\n  var sortRemainingBy = facetOrdering.sortRemainingBy;\n  var ordering;\n\n  if (sortRemainingBy === 'hidden') {\n    return orderedFacets;\n  } else if (sortRemainingBy === 'alpha') {\n    ordering = [['path', 'name'], ['asc', 'asc']];\n  } else {\n    ordering = [['count'], ['desc']];\n  }\n\n  return orderedFacets.concat(orderBy(remainingFacets, ordering[0], ordering[1]));\n}\n/**\n * @param {SearchResults} results the search results class\n * @param {string} attribute the attribute to retrieve ordering of\n * @returns {FacetOrdering=}\n */\n\n\nfunction getFacetOrdering(results, attribute) {\n  return results.renderingContent && results.renderingContent.facetOrdering && results.renderingContent.facetOrdering.values && results.renderingContent.facetOrdering.values[attribute];\n}\n/**\n * Get a the list of values for a given facet attribute. Those values are sorted\n * refinement first, descending count (bigger value on top), and name ascending\n * (alphabetical order). The sort formula can overridden using either string based\n * predicates or a function.\n *\n * This method will return all the values returned by the Algolia engine plus all\n * the values already refined. This means that it can happen that the\n * `maxValuesPerFacet` [configuration](https://www.algolia.com/doc/rest-api/search#param-maxValuesPerFacet)\n * might not be respected if you have facet values that are already refined.\n * @param {string} attribute attribute name\n * @param {object} opts configuration options.\n * @param {boolean} [opts.facetOrdering]\n * Force the use of facetOrdering from the result if a sortBy is present. If\n * sortBy isn't present, facetOrdering will be used automatically.\n * @param {Array.<string> | function} opts.sortBy\n * When using strings, it consists of\n * the name of the [FacetValue](#SearchResults.FacetValue) or the\n * [HierarchicalFacet](#SearchResults.HierarchicalFacet) attributes with the\n * order (`asc` or `desc`). For example to order the value by count, the\n * argument would be `['count:asc']`.\n *\n * If only the attribute name is specified, the ordering defaults to the one\n * specified in the default value for this attribute.\n *\n * When not specified, the order is\n * ascending.  This parameter can also be a function which takes two facet\n * values and should return a number, 0 if equal, 1 if the first argument is\n * bigger or -1 otherwise.\n *\n * The default value for this attribute `['isRefined:desc', 'count:desc', 'name:asc']`\n * @return {FacetValue[]|HierarchicalFacet|undefined} depending on the type of facet of\n * the attribute requested (hierarchical, disjunctive or conjunctive)\n * @example\n * helper.on('result', function(event){\n *   //get values ordered only by name ascending using the string predicate\n *   event.results.getFacetValues('city', {sortBy: ['name:asc']});\n *   //get values  ordered only by count ascending using a function\n *   event.results.getFacetValues('city', {\n *     // this is equivalent to ['count:asc']\n *     sortBy: function(a, b) {\n *       if (a.count === b.count) return 0;\n *       if (a.count > b.count)   return 1;\n *       if (b.count > a.count)   return -1;\n *     }\n *   });\n * });\n */\n\n\nSearchResults.prototype.getFacetValues = function (attribute, opts) {\n  var facetValues = extractNormalizedFacetValues(this, attribute);\n\n  if (!facetValues) {\n    return undefined;\n  }\n\n  var options = defaultsPure({}, opts, {\n    sortBy: SearchResults.DEFAULT_SORT,\n    // if no sortBy is given, attempt to sort based on facetOrdering\n    // if it is given, we still allow to sort via facet ordering first\n    facetOrdering: !(opts && opts.sortBy)\n  });\n  var results = this;\n  var attributes;\n\n  if (Array.isArray(facetValues)) {\n    attributes = [attribute];\n  } else {\n    var config = results._state.getHierarchicalFacetByName(facetValues.name);\n\n    attributes = config.attributes;\n  }\n\n  return recSort(function (data, facetName) {\n    if (options.facetOrdering) {\n      var facetOrdering = getFacetOrdering(results, facetName);\n\n      if (Boolean(facetOrdering)) {\n        return sortViaFacetOrdering(data, facetOrdering);\n      }\n    }\n\n    if (Array.isArray(options.sortBy)) {\n      var order = formatSort(options.sortBy, SearchResults.DEFAULT_SORT);\n      return orderBy(data, order[0], order[1]);\n    } else if (typeof options.sortBy === 'function') {\n      return vanillaSortFn(options.sortBy, data);\n    }\n\n    throw new Error('options.sortBy is optional but if defined it must be ' + 'either an array of string (predicates) or a sorting function');\n  }, facetValues, attributes);\n};\n/**\n * Returns the facet stats if attribute is defined and the facet contains some.\n * Otherwise returns undefined.\n * @param {string} attribute name of the faceted attribute\n * @return {object} The stats of the facet\n */\n\n\nSearchResults.prototype.getFacetStats = function (attribute) {\n  if (this._state.isConjunctiveFacet(attribute)) {\n    return getFacetStatsIfAvailable(this.facets, attribute);\n  } else if (this._state.isDisjunctiveFacet(attribute)) {\n    return getFacetStatsIfAvailable(this.disjunctiveFacets, attribute);\n  }\n\n  return undefined;\n};\n/**\n * @typedef {Object} FacetListItem\n * @property {string} name\n */\n\n/**\n * @param {FacetListItem[]} facetList (has more items, but enough for here)\n * @param {string} facetName\n */\n\n\nfunction getFacetStatsIfAvailable(facetList, facetName) {\n  var data = find(facetList, function (facet) {\n    return facet.name === facetName;\n  });\n  return data && data.stats;\n}\n/**\n * Returns all refinements for all filters + tags. It also provides\n * additional information: count and exhaustiveness for each filter.\n *\n * See the [refinement type](#Refinement) for an exhaustive view of the available\n * data.\n *\n * Note that for a numeric refinement, results are grouped per operator, this\n * means that it will return responses for operators which are empty.\n *\n * @return {Array.<Refinement>} all the refinements\n */\n\n\nSearchResults.prototype.getRefinements = function () {\n  var state = this._state;\n  var results = this;\n  var res = [];\n  Object.keys(state.facetsRefinements).forEach(function (attributeName) {\n    state.facetsRefinements[attributeName].forEach(function (name) {\n      res.push(getRefinement(state, 'facet', attributeName, name, results.facets));\n    });\n  });\n  Object.keys(state.facetsExcludes).forEach(function (attributeName) {\n    state.facetsExcludes[attributeName].forEach(function (name) {\n      res.push(getRefinement(state, 'exclude', attributeName, name, results.facets));\n    });\n  });\n  Object.keys(state.disjunctiveFacetsRefinements).forEach(function (attributeName) {\n    state.disjunctiveFacetsRefinements[attributeName].forEach(function (name) {\n      res.push(getRefinement(state, 'disjunctive', attributeName, name, results.disjunctiveFacets));\n    });\n  });\n  Object.keys(state.hierarchicalFacetsRefinements).forEach(function (attributeName) {\n    state.hierarchicalFacetsRefinements[attributeName].forEach(function (name) {\n      res.push(getHierarchicalRefinement(state, attributeName, name, results.hierarchicalFacets));\n    });\n  });\n  Object.keys(state.numericRefinements).forEach(function (attributeName) {\n    var operators = state.numericRefinements[attributeName];\n    Object.keys(operators).forEach(function (operator) {\n      operators[operator].forEach(function (value) {\n        res.push({\n          type: 'numeric',\n          attributeName: attributeName,\n          name: value,\n          numericValue: value,\n          operator: operator\n        });\n      });\n    });\n  });\n  state.tagRefinements.forEach(function (name) {\n    res.push({\n      type: 'tag',\n      attributeName: '_tags',\n      name: name\n    });\n  });\n  return res;\n};\n/**\n * @typedef {Object} Facet\n * @property {string} name\n * @property {Object} data\n * @property {boolean} exhaustive\n */\n\n/**\n * @param {*} state\n * @param {*} type\n * @param {string} attributeName\n * @param {*} name\n * @param {Facet[]} resultsFacets\n */\n\n\nfunction getRefinement(state, type, attributeName, name, resultsFacets) {\n  var facet = find(resultsFacets, function (f) {\n    return f.name === attributeName;\n  });\n  var count = facet && facet.data && facet.data[name] ? facet.data[name] : 0;\n  var exhaustive = facet && facet.exhaustive || false;\n  return {\n    type: type,\n    attributeName: attributeName,\n    name: name,\n    count: count,\n    exhaustive: exhaustive\n  };\n}\n/**\n * @param {*} state\n * @param {string} attributeName\n * @param {*} name\n * @param {Facet[]} resultsFacets\n */\n\n\nfunction getHierarchicalRefinement(state, attributeName, name, resultsFacets) {\n  var facetDeclaration = state.getHierarchicalFacetByName(attributeName);\n\n  var separator = state._getHierarchicalFacetSeparator(facetDeclaration);\n\n  var split = name.split(separator);\n  var rootFacet = find(resultsFacets, function (facet) {\n    return facet.name === attributeName;\n  });\n  var facet = split.reduce(function (intermediateFacet, part) {\n    var newFacet = intermediateFacet && find(intermediateFacet.data, function (f) {\n      return f.name === part;\n    });\n    return newFacet !== undefined ? newFacet : intermediateFacet;\n  }, rootFacet);\n  var count = facet && facet.count || 0;\n  var exhaustive = facet && facet.exhaustive || false;\n  var path = facet && facet.path || '';\n  return {\n    type: 'hierarchical',\n    attributeName: attributeName,\n    name: path,\n    count: count,\n    exhaustive: exhaustive\n  };\n}\n\nmodule.exports = SearchResults;","map":{"version":3,"names":["merge","require","defaultsPure","orderBy","compact","find","findIndex","formatSort","fv","escapeFacetValue","unescapeFacetValue","generateHierarchicalTree","getIndices","attributes","indices","forEach","val","idx","assignFacetStats","dest","facetStats","key","stats","findMatchingHierarchicalFacetFromAttributeName","hierarchicalFacets","hierarchicalAttributeName","facetKeyMatchesAttribute","hierarchicalFacet","facetNames","indexOf","SearchResults","state","results","options","mainSubResponse","_rawResults","self","Object","keys","processingTimeMS","reduce","sum","result","undefined","disjunctiveFacets","map","initFutureTree","facets","getRefinedDisjunctiveFacets","facetsIndices","disjunctiveFacetsIndices","nextDisjunctiveResult","mainFacets","facetKey","facetValueObject","facetIndex","idxAttributeName","f","name","attribute","data","exhaustive","exhaustiveFacetsCount","isFacetDisjunctive","isFacetConjunctive","position","facets_stats","disjunctiveFacet","getHierarchicalFacetByName","dfacet","facetResults","attributeIndex","dataFromMainRequest","disjunctiveFacetsRefinements","refinementValue","getRefinedHierarchicalFacets","refinedFacet","separator","_getHierarchicalFacetSeparator","currentRefinement","getHierarchicalRefinement","length","split","defaultData","root","facetsExcludes","facetName","excludes","facetValue","_state","prototype","getFacetByName","predicate","facet","extractNormalizedFacetValues","isConjunctiveFacet","value","escapedValue","count","isRefined","isFacetRefined","isExcluded","isExcludeRefined","isDisjunctiveFacet","isDisjunctiveFacetRefined","isHierarchicalFacet","recSort","sortFn","node","names","level","Array","isArray","children","childNode","sortedChildren","newNode","DEFAULT_SORT","vanillaSortFn","order","sort","sortViaFacetOrdering","facetValues","facetOrdering","orderedFacets","remainingFacets","reverseOrder","acc","i","item","path","push","filter","sortRemainingBy","ordering","concat","getFacetOrdering","renderingContent","values","getFacetValues","opts","sortBy","config","Boolean","Error","getFacetStats","getFacetStatsIfAvailable","facetList","getRefinements","res","facetsRefinements","attributeName","getRefinement","hierarchicalFacetsRefinements","numericRefinements","operators","operator","type","numericValue","tagRefinements","resultsFacets","facetDeclaration","rootFacet","intermediateFacet","part","newFacet","module","exports"],"sources":["/home/dedm/Documents/sript/lab3-script/node_modules/algoliasearch-helper/src/SearchResults/index.js"],"sourcesContent":["'use strict';\n\nvar merge = require('../functions/merge');\nvar defaultsPure = require('../functions/defaultsPure');\nvar orderBy = require('../functions/orderBy');\nvar compact = require('../functions/compact');\nvar find = require('../functions/find');\nvar findIndex = require('../functions/findIndex');\nvar formatSort = require('../functions/formatSort');\nvar fv = require('../functions/escapeFacetValue');\nvar escapeFacetValue = fv.escapeFacetValue;\nvar unescapeFacetValue = fv.unescapeFacetValue;\n\nvar generateHierarchicalTree = require('./generate-hierarchical-tree');\n\n/**\n * @typedef SearchResults.Facet\n * @type {object}\n * @property {string} name name of the attribute in the record\n * @property {object} data the faceting data: value, number of entries\n * @property {object} stats undefined unless facet_stats is retrieved from algolia\n */\n\n/**\n * @typedef SearchResults.HierarchicalFacet\n * @type {object}\n * @property {string} name name of the current value given the hierarchical level, trimmed.\n * If root node, you get the facet name\n * @property {number} count number of objects matching this hierarchical value\n * @property {string} path the current hierarchical value full path\n * @property {boolean} isRefined `true` if the current value was refined, `false` otherwise\n * @property {HierarchicalFacet[]} data sub values for the current level\n */\n\n/**\n * @typedef SearchResults.FacetValue\n * @type {object}\n * @property {string} name the facet value itself\n * @property {number} count times this facet appears in the results\n * @property {boolean} isRefined is the facet currently selected\n * @property {boolean} isExcluded is the facet currently excluded (only for conjunctive facets)\n */\n\n/**\n * @typedef Refinement\n * @type {object}\n * @property {string} type the type of filter used:\n * `numeric`, `facet`, `exclude`, `disjunctive`, `hierarchical`\n * @property {string} attributeName name of the attribute used for filtering\n * @property {string} name the value of the filter\n * @property {number} numericValue the value as a number. Only for numeric filters.\n * @property {string} operator the operator used. Only for numeric filters.\n * @property {number} count the number of computed hits for this filter. Only on facets.\n * @property {boolean} exhaustive if the count is exhaustive\n */\n\n/**\n * @param {string[]} attributes\n */\nfunction getIndices(attributes) {\n  var indices = {};\n\n  attributes.forEach(function(val, idx) {\n    indices[val] = idx;\n  });\n\n  return indices;\n}\n\nfunction assignFacetStats(dest, facetStats, key) {\n  if (facetStats && facetStats[key]) {\n    dest.stats = facetStats[key];\n  }\n}\n\n/**\n * @typedef {Object} HierarchicalFacet\n * @property {string} name\n * @property {string[]} attributes\n */\n\n/**\n * @param {HierarchicalFacet[]} hierarchicalFacets\n * @param {string} hierarchicalAttributeName\n */\nfunction findMatchingHierarchicalFacetFromAttributeName(\n  hierarchicalFacets,\n  hierarchicalAttributeName\n) {\n  return find(hierarchicalFacets, function facetKeyMatchesAttribute(\n    hierarchicalFacet\n  ) {\n    var facetNames = hierarchicalFacet.attributes || [];\n    return facetNames.indexOf(hierarchicalAttributeName) > -1;\n  });\n}\n\n/*eslint-disable */\n/**\n * Constructor for SearchResults\n * @class\n * @classdesc SearchResults contains the results of a query to Algolia using the\n * {@link AlgoliaSearchHelper}.\n * @param {SearchParameters} state state that led to the response\n * @param {array.<object>} results the results from algolia client\n * @example <caption>SearchResults of the first query in\n * <a href=\"http://demos.algolia.com/instant-search-demo\">the instant search demo</a></caption>\n{\n   \"hitsPerPage\": 10,\n   \"processingTimeMS\": 2,\n   \"facets\": [\n      {\n         \"name\": \"type\",\n         \"data\": {\n            \"HardGood\": 6627,\n            \"BlackTie\": 550,\n            \"Music\": 665,\n            \"Software\": 131,\n            \"Game\": 456,\n            \"Movie\": 1571\n         },\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"Free shipping\": 5507\n         },\n         \"name\": \"shipping\"\n      }\n  ],\n   \"hits\": [\n      {\n         \"thumbnailImage\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_54x108_s.gif\",\n         \"_highlightResult\": {\n            \"shortDescription\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n               \"matchedWords\": []\n            },\n            \"category\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Computer Security Software\",\n               \"matchedWords\": []\n            },\n            \"manufacturer\": {\n               \"matchedWords\": [],\n               \"value\": \"Webroot\",\n               \"matchLevel\": \"none\"\n            },\n            \"name\": {\n               \"value\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n               \"matchedWords\": [],\n               \"matchLevel\": \"none\"\n            }\n         },\n         \"image\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_105x210_sc.jpg\",\n         \"shipping\": \"Free shipping\",\n         \"bestSellingRank\": 4,\n         \"shortDescription\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n         \"url\": \"http://www.bestbuy.com/site/webroot-secureanywhere-internet-security-3-devi…d=1219060687969&skuId=1688832&cmp=RMX&ky=2d3GfEmNIzjA0vkzveHdZEBgpPCyMnLTJ\",\n         \"name\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n         \"category\": \"Computer Security Software\",\n         \"salePrice_range\": \"1 - 50\",\n         \"objectID\": \"1688832\",\n         \"type\": \"Software\",\n         \"customerReviewCount\": 5980,\n         \"salePrice\": 49.99,\n         \"manufacturer\": \"Webroot\"\n      },\n      ....\n  ],\n   \"nbHits\": 10000,\n   \"disjunctiveFacets\": [\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"5\": 183,\n            \"12\": 112,\n            \"7\": 149,\n            ...\n         },\n         \"name\": \"customerReviewCount\",\n         \"stats\": {\n            \"max\": 7461,\n            \"avg\": 157.939,\n            \"min\": 1\n         }\n      },\n      {\n         \"data\": {\n            \"Printer Ink\": 142,\n            \"Wireless Speakers\": 60,\n            \"Point & Shoot Cameras\": 48,\n            ...\n         },\n         \"name\": \"category\",\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"> 5000\": 2,\n            \"1 - 50\": 6524,\n            \"501 - 2000\": 566,\n            \"201 - 500\": 1501,\n            \"101 - 200\": 1360,\n            \"2001 - 5000\": 47\n         },\n         \"name\": \"salePrice_range\"\n      },\n      {\n         \"data\": {\n            \"Dynex™\": 202,\n            \"Insignia™\": 230,\n            \"PNY\": 72,\n            ...\n         },\n         \"name\": \"manufacturer\",\n         \"exhaustive\": false\n      }\n  ],\n   \"query\": \"\",\n   \"nbPages\": 100,\n   \"page\": 0,\n   \"index\": \"bestbuy\"\n}\n **/\n/*eslint-enable */\nfunction SearchResults(state, results, options) {\n  var mainSubResponse = results[0];\n\n  this._rawResults = results;\n\n  var self = this;\n\n  // https://www.algolia.com/doc/api-reference/api-methods/search/#response\n  Object.keys(mainSubResponse).forEach(function(key) {\n    self[key] = mainSubResponse[key];\n  });\n\n  // Make every key of the result options reachable from the instance\n  Object.keys(options || {}).forEach(function(key) {\n    self[key] = options[key];\n  });\n\n  /**\n   * query used to generate the results\n   * @name query\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * The query as parsed by the engine given all the rules.\n   * @name parsedQuery\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * all the records that match the search parameters. Each record is\n   * augmented with a new attribute `_highlightResult`\n   * which is an object keyed by attribute and with the following properties:\n   *  - `value` : the value of the facet highlighted (html)\n   *  - `matchLevel`: full, partial or none depending on how the query terms match\n   * @name hits\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * index where the results come from\n   * @name index\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * number of hits per page requested\n   * @name hitsPerPage\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * total number of hits of this query on the index\n   * @name nbHits\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * total number of pages with respect to the number of hits per page and the total number of hits\n   * @name nbPages\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * current page\n   * @name page\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * The position if the position was guessed by IP.\n   * @name aroundLatLng\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"48.8637,2.3615\",\n   */\n  /**\n   * The radius computed by Algolia.\n   * @name automaticRadius\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"126792922\",\n   */\n  /**\n   * String identifying the server used to serve this request.\n   *\n   * getRankingInfo needs to be set to `true` for this to be returned\n   *\n   * @name serverUsed\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"c7-use-2.algolia.net\",\n   */\n  /**\n   * Boolean that indicates if the computation of the counts did time out.\n   * @deprecated\n   * @name timeoutCounts\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * Boolean that indicates if the computation of the hits did time out.\n   * @deprecated\n   * @name timeoutHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * True if the counts of the facets is exhaustive\n   * @name exhaustiveFacetsCount\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * True if the number of hits is exhaustive\n   * @name exhaustiveNbHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * Contains the userData if they are set by a [query rule](https://www.algolia.com/doc/guides/query-rules/query-rules-overview/).\n   * @name userData\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * queryID is the unique identifier of the query used to generate the current search results.\n   * This value is only available if the `clickAnalytics` search parameter is set to `true`.\n   * @name queryID\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n\n  /**\n   * sum of the processing time of all the queries\n   * @member {number}\n   */\n  this.processingTimeMS = results.reduce(function(sum, result) {\n    return result.processingTimeMS === undefined\n      ? sum\n      : sum + result.processingTimeMS;\n  }, 0);\n\n  /**\n   * disjunctive facets results\n   * @member {SearchResults.Facet[]}\n   */\n  this.disjunctiveFacets = [];\n  /**\n   * disjunctive facets results\n   * @member {SearchResults.HierarchicalFacet[]}\n   */\n  this.hierarchicalFacets = state.hierarchicalFacets.map(function initFutureTree() {\n    return [];\n  });\n  /**\n   * other facets results\n   * @member {SearchResults.Facet[]}\n   */\n  this.facets = [];\n\n  var disjunctiveFacets = state.getRefinedDisjunctiveFacets();\n\n  var facetsIndices = getIndices(state.facets);\n  var disjunctiveFacetsIndices = getIndices(state.disjunctiveFacets);\n  var nextDisjunctiveResult = 1;\n\n  // Since we send request only for disjunctive facets that have been refined,\n  // we get the facets information from the first, general, response.\n\n  var mainFacets = mainSubResponse.facets || {};\n\n  Object.keys(mainFacets).forEach(function(facetKey) {\n    var facetValueObject = mainFacets[facetKey];\n\n    var hierarchicalFacet = findMatchingHierarchicalFacetFromAttributeName(\n      state.hierarchicalFacets,\n      facetKey\n    );\n\n    if (hierarchicalFacet) {\n      // Place the hierarchicalFacet data at the correct index depending on\n      // the attributes order that was defined at the helper initialization\n      var facetIndex = hierarchicalFacet.attributes.indexOf(facetKey);\n      var idxAttributeName = findIndex(state.hierarchicalFacets, function(f) {\n        return f.name === hierarchicalFacet.name;\n      });\n      self.hierarchicalFacets[idxAttributeName][facetIndex] = {\n        attribute: facetKey,\n        data: facetValueObject,\n        exhaustive: mainSubResponse.exhaustiveFacetsCount\n      };\n    } else {\n      var isFacetDisjunctive = state.disjunctiveFacets.indexOf(facetKey) !== -1;\n      var isFacetConjunctive = state.facets.indexOf(facetKey) !== -1;\n      var position;\n\n      if (isFacetDisjunctive) {\n        position = disjunctiveFacetsIndices[facetKey];\n        self.disjunctiveFacets[position] = {\n          name: facetKey,\n          data: facetValueObject,\n          exhaustive: mainSubResponse.exhaustiveFacetsCount\n        };\n        assignFacetStats(self.disjunctiveFacets[position], mainSubResponse.facets_stats, facetKey);\n      }\n      if (isFacetConjunctive) {\n        position = facetsIndices[facetKey];\n        self.facets[position] = {\n          name: facetKey,\n          data: facetValueObject,\n          exhaustive: mainSubResponse.exhaustiveFacetsCount\n        };\n        assignFacetStats(self.facets[position], mainSubResponse.facets_stats, facetKey);\n      }\n    }\n  });\n\n  // Make sure we do not keep holes within the hierarchical facets\n  this.hierarchicalFacets = compact(this.hierarchicalFacets);\n\n  // aggregate the refined disjunctive facets\n  disjunctiveFacets.forEach(function(disjunctiveFacet) {\n    var result = results[nextDisjunctiveResult];\n    var facets = result && result.facets ? result.facets : {};\n    var hierarchicalFacet = state.getHierarchicalFacetByName(disjunctiveFacet);\n\n    // There should be only item in facets.\n    Object.keys(facets).forEach(function(dfacet) {\n      var facetResults = facets[dfacet];\n\n      var position;\n\n      if (hierarchicalFacet) {\n        position = findIndex(state.hierarchicalFacets, function(f) {\n          return f.name === hierarchicalFacet.name;\n        });\n        var attributeIndex = findIndex(self.hierarchicalFacets[position], function(f) {\n          return f.attribute === dfacet;\n        });\n\n        // previous refinements and no results so not able to find it\n        if (attributeIndex === -1) {\n          return;\n        }\n\n        self.hierarchicalFacets[position][attributeIndex].data = merge(\n          {},\n          self.hierarchicalFacets[position][attributeIndex].data,\n          facetResults\n        );\n      } else {\n        position = disjunctiveFacetsIndices[dfacet];\n\n        var dataFromMainRequest = mainSubResponse.facets && mainSubResponse.facets[dfacet] || {};\n\n        self.disjunctiveFacets[position] = {\n          name: dfacet,\n          data: defaultsPure({}, facetResults, dataFromMainRequest),\n          exhaustive: result.exhaustiveFacetsCount\n        };\n        assignFacetStats(self.disjunctiveFacets[position], result.facets_stats, dfacet);\n\n        if (state.disjunctiveFacetsRefinements[dfacet]) {\n          state.disjunctiveFacetsRefinements[dfacet].forEach(function(refinementValue) {\n            // add the disjunctive refinements if it is no more retrieved\n            if (!self.disjunctiveFacets[position].data[refinementValue] &&\n              state.disjunctiveFacetsRefinements[dfacet].indexOf(unescapeFacetValue(refinementValue)) > -1) {\n              self.disjunctiveFacets[position].data[refinementValue] = 0;\n            }\n          });\n        }\n      }\n    });\n    nextDisjunctiveResult++;\n  });\n\n  // if we have some root level values for hierarchical facets, merge them\n  state.getRefinedHierarchicalFacets().forEach(function(refinedFacet) {\n    var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n    var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n    // if we are already at a root refinement (or no refinement at all), there is no\n    // root level values request\n    if (currentRefinement.length === 0 || currentRefinement[0].split(separator).length < 2) {\n      return;\n    }\n\n    var result = results[nextDisjunctiveResult];\n    var facets = result && result.facets\n      ? result.facets\n      : {};\n    Object.keys(facets).forEach(function(dfacet) {\n      var facetResults = facets[dfacet];\n      var position = findIndex(state.hierarchicalFacets, function(f) {\n        return f.name === hierarchicalFacet.name;\n      });\n      var attributeIndex = findIndex(self.hierarchicalFacets[position], function(f) {\n        return f.attribute === dfacet;\n      });\n\n      // previous refinements and no results so not able to find it\n      if (attributeIndex === -1) {\n        return;\n      }\n\n      // when we always get root levels, if the hits refinement is `beers > IPA` (count: 5),\n      // then the disjunctive values will be `beers` (count: 100),\n      // but we do not want to display\n      //   | beers (100)\n      //     > IPA (5)\n      // We want\n      //   | beers (5)\n      //     > IPA (5)\n      var defaultData = {};\n\n      if (currentRefinement.length > 0) {\n        var root = currentRefinement[0].split(separator)[0];\n        defaultData[root] = self.hierarchicalFacets[position][attributeIndex].data[root];\n      }\n\n      self.hierarchicalFacets[position][attributeIndex].data = defaultsPure(\n        defaultData,\n        facetResults,\n        self.hierarchicalFacets[position][attributeIndex].data\n      );\n    });\n\n    nextDisjunctiveResult++;\n  });\n\n  // add the excludes\n  Object.keys(state.facetsExcludes).forEach(function(facetName) {\n    var excludes = state.facetsExcludes[facetName];\n    var position = facetsIndices[facetName];\n\n    self.facets[position] = {\n      name: facetName,\n      data: mainSubResponse.facets[facetName],\n      exhaustive: mainSubResponse.exhaustiveFacetsCount\n    };\n    excludes.forEach(function(facetValue) {\n      self.facets[position] = self.facets[position] || {name: facetName};\n      self.facets[position].data = self.facets[position].data || {};\n      self.facets[position].data[facetValue] = 0;\n    });\n  });\n\n  /**\n   * @type {Array}\n   */\n  this.hierarchicalFacets = this.hierarchicalFacets.map(generateHierarchicalTree(state));\n\n  /**\n   * @type {Array}\n   */\n  this.facets = compact(this.facets);\n  /**\n   * @type {Array}\n   */\n  this.disjunctiveFacets = compact(this.disjunctiveFacets);\n\n  this._state = state;\n}\n\n/**\n * Get a facet object with its name\n * @deprecated\n * @param {string} name name of the faceted attribute\n * @return {SearchResults.Facet} the facet object\n */\nSearchResults.prototype.getFacetByName = function(name) {\n  function predicate(facet) {\n    return facet.name === name;\n  }\n\n  return find(this.facets, predicate) ||\n    find(this.disjunctiveFacets, predicate) ||\n    find(this.hierarchicalFacets, predicate);\n};\n\n/**\n * Get the facet values of a specified attribute from a SearchResults object.\n * @private\n * @param {SearchResults} results the search results to search in\n * @param {string} attribute name of the faceted attribute to search for\n * @return {array|object} facet values. For the hierarchical facets it is an object.\n */\nfunction extractNormalizedFacetValues(results, attribute) {\n  function predicate(facet) {\n    return facet.name === attribute;\n  }\n\n  if (results._state.isConjunctiveFacet(attribute)) {\n    var facet = find(results.facets, predicate);\n    if (!facet) return [];\n\n    return Object.keys(facet.data).map(function(name) {\n      var value = escapeFacetValue(name);\n      return {\n        name: name,\n        escapedValue: value,\n        count: facet.data[name],\n        isRefined: results._state.isFacetRefined(attribute, value),\n        isExcluded: results._state.isExcludeRefined(attribute, name)\n      };\n    });\n  } else if (results._state.isDisjunctiveFacet(attribute)) {\n    var disjunctiveFacet = find(results.disjunctiveFacets, predicate);\n    if (!disjunctiveFacet) return [];\n\n    return Object.keys(disjunctiveFacet.data).map(function(name) {\n      var value = escapeFacetValue(name);\n      return {\n        name: name,\n        escapedValue: value,\n        count: disjunctiveFacet.data[name],\n        isRefined: results._state.isDisjunctiveFacetRefined(attribute, value)\n      };\n    });\n  } else if (results._state.isHierarchicalFacet(attribute)) {\n    return find(results.hierarchicalFacets, predicate);\n  }\n}\n\n/**\n * Sort nodes of a hierarchical or disjunctive facet results\n * @private\n * @param {function} sortFn\n * @param {HierarchicalFacet|Array} node node upon which we want to apply the sort\n * @param {string[]} names attribute names\n * @param {number} [level=0] current index in the names array\n */\nfunction recSort(sortFn, node, names, level) {\n  level = level || 0;\n\n  if (Array.isArray(node)) {\n    return sortFn(node, names[level]);\n  }\n\n  if (!node.data || node.data.length === 0) {\n    return node;\n  }\n\n  var children = node.data.map(function(childNode) {\n    return recSort(sortFn, childNode, names, level + 1);\n  });\n  var sortedChildren = sortFn(children, names[level]);\n  var newNode = defaultsPure({data: sortedChildren}, node);\n  return newNode;\n}\n\nSearchResults.DEFAULT_SORT = ['isRefined:desc', 'count:desc', 'name:asc'];\n\nfunction vanillaSortFn(order, data) {\n  return data.sort(order);\n}\n\n/**\n * @typedef FacetOrdering\n * @type {Object}\n * @property {string[]} [order]\n * @property {'count' | 'alpha' | 'hidden'} [sortRemainingBy]\n */\n\n/**\n * Sorts facet arrays via their facet ordering\n * @param {Array} facetValues the values\n * @param {FacetOrdering} facetOrdering the ordering\n * @returns {Array}\n */\nfunction sortViaFacetOrdering(facetValues, facetOrdering) {\n  var orderedFacets = [];\n  var remainingFacets = [];\n\n  var order = facetOrdering.order || [];\n  /**\n   * an object with the keys being the values in order, the values their index:\n   * ['one', 'two'] -> { one: 0, two: 1 }\n   */\n  var reverseOrder = order.reduce(function(acc, name, i) {\n    acc[name] = i;\n    return acc;\n  }, {});\n\n  facetValues.forEach(function(item) {\n    // hierarchical facets get sorted using their raw name\n    var name = item.path || item.name;\n    if (reverseOrder[name] !== undefined) {\n      orderedFacets[reverseOrder[name]] = item;\n    } else {\n      remainingFacets.push(item);\n    }\n  });\n\n  orderedFacets = orderedFacets.filter(function(facet) {\n    return facet;\n  });\n\n  var sortRemainingBy = facetOrdering.sortRemainingBy;\n  var ordering;\n  if (sortRemainingBy === 'hidden') {\n    return orderedFacets;\n  } else if (sortRemainingBy === 'alpha') {\n    ordering = [['path', 'name'], ['asc', 'asc']];\n  } else {\n    ordering = [['count'], ['desc']];\n  }\n\n  return orderedFacets.concat(\n    orderBy(remainingFacets, ordering[0], ordering[1])\n  );\n}\n\n/**\n * @param {SearchResults} results the search results class\n * @param {string} attribute the attribute to retrieve ordering of\n * @returns {FacetOrdering=}\n */\nfunction getFacetOrdering(results, attribute) {\n  return (\n    results.renderingContent &&\n    results.renderingContent.facetOrdering &&\n    results.renderingContent.facetOrdering.values &&\n    results.renderingContent.facetOrdering.values[attribute]\n  );\n}\n\n/**\n * Get a the list of values for a given facet attribute. Those values are sorted\n * refinement first, descending count (bigger value on top), and name ascending\n * (alphabetical order). The sort formula can overridden using either string based\n * predicates or a function.\n *\n * This method will return all the values returned by the Algolia engine plus all\n * the values already refined. This means that it can happen that the\n * `maxValuesPerFacet` [configuration](https://www.algolia.com/doc/rest-api/search#param-maxValuesPerFacet)\n * might not be respected if you have facet values that are already refined.\n * @param {string} attribute attribute name\n * @param {object} opts configuration options.\n * @param {boolean} [opts.facetOrdering]\n * Force the use of facetOrdering from the result if a sortBy is present. If\n * sortBy isn't present, facetOrdering will be used automatically.\n * @param {Array.<string> | function} opts.sortBy\n * When using strings, it consists of\n * the name of the [FacetValue](#SearchResults.FacetValue) or the\n * [HierarchicalFacet](#SearchResults.HierarchicalFacet) attributes with the\n * order (`asc` or `desc`). For example to order the value by count, the\n * argument would be `['count:asc']`.\n *\n * If only the attribute name is specified, the ordering defaults to the one\n * specified in the default value for this attribute.\n *\n * When not specified, the order is\n * ascending.  This parameter can also be a function which takes two facet\n * values and should return a number, 0 if equal, 1 if the first argument is\n * bigger or -1 otherwise.\n *\n * The default value for this attribute `['isRefined:desc', 'count:desc', 'name:asc']`\n * @return {FacetValue[]|HierarchicalFacet|undefined} depending on the type of facet of\n * the attribute requested (hierarchical, disjunctive or conjunctive)\n * @example\n * helper.on('result', function(event){\n *   //get values ordered only by name ascending using the string predicate\n *   event.results.getFacetValues('city', {sortBy: ['name:asc']});\n *   //get values  ordered only by count ascending using a function\n *   event.results.getFacetValues('city', {\n *     // this is equivalent to ['count:asc']\n *     sortBy: function(a, b) {\n *       if (a.count === b.count) return 0;\n *       if (a.count > b.count)   return 1;\n *       if (b.count > a.count)   return -1;\n *     }\n *   });\n * });\n */\nSearchResults.prototype.getFacetValues = function(attribute, opts) {\n  var facetValues = extractNormalizedFacetValues(this, attribute);\n  if (!facetValues) {\n    return undefined;\n  }\n\n  var options = defaultsPure({}, opts, {\n    sortBy: SearchResults.DEFAULT_SORT,\n    // if no sortBy is given, attempt to sort based on facetOrdering\n    // if it is given, we still allow to sort via facet ordering first\n    facetOrdering: !(opts && opts.sortBy)\n  });\n\n  var results = this;\n  var attributes;\n  if (Array.isArray(facetValues)) {\n    attributes = [attribute];\n  } else {\n    var config = results._state.getHierarchicalFacetByName(facetValues.name);\n    attributes = config.attributes;\n  }\n\n  return recSort(function(data, facetName) {\n    if (options.facetOrdering) {\n      var facetOrdering = getFacetOrdering(results, facetName);\n      if (Boolean(facetOrdering)) {\n        return sortViaFacetOrdering(data, facetOrdering);\n      }\n    }\n\n    if (Array.isArray(options.sortBy)) {\n      var order = formatSort(options.sortBy, SearchResults.DEFAULT_SORT);\n      return orderBy(data, order[0], order[1]);\n    } else if (typeof options.sortBy === 'function') {\n      return vanillaSortFn(options.sortBy, data);\n    }\n    throw new Error(\n      'options.sortBy is optional but if defined it must be ' +\n        'either an array of string (predicates) or a sorting function'\n    );\n  }, facetValues, attributes);\n};\n\n/**\n * Returns the facet stats if attribute is defined and the facet contains some.\n * Otherwise returns undefined.\n * @param {string} attribute name of the faceted attribute\n * @return {object} The stats of the facet\n */\nSearchResults.prototype.getFacetStats = function(attribute) {\n  if (this._state.isConjunctiveFacet(attribute)) {\n    return getFacetStatsIfAvailable(this.facets, attribute);\n  } else if (this._state.isDisjunctiveFacet(attribute)) {\n    return getFacetStatsIfAvailable(this.disjunctiveFacets, attribute);\n  }\n\n  return undefined;\n};\n\n/**\n * @typedef {Object} FacetListItem\n * @property {string} name\n */\n\n/**\n * @param {FacetListItem[]} facetList (has more items, but enough for here)\n * @param {string} facetName\n */\nfunction getFacetStatsIfAvailable(facetList, facetName) {\n  var data = find(facetList, function(facet) {\n    return facet.name === facetName;\n  });\n  return data && data.stats;\n}\n\n/**\n * Returns all refinements for all filters + tags. It also provides\n * additional information: count and exhaustiveness for each filter.\n *\n * See the [refinement type](#Refinement) for an exhaustive view of the available\n * data.\n *\n * Note that for a numeric refinement, results are grouped per operator, this\n * means that it will return responses for operators which are empty.\n *\n * @return {Array.<Refinement>} all the refinements\n */\nSearchResults.prototype.getRefinements = function() {\n  var state = this._state;\n  var results = this;\n  var res = [];\n\n  Object.keys(state.facetsRefinements).forEach(function(attributeName) {\n    state.facetsRefinements[attributeName].forEach(function(name) {\n      res.push(getRefinement(state, 'facet', attributeName, name, results.facets));\n    });\n  });\n\n  Object.keys(state.facetsExcludes).forEach(function(attributeName) {\n    state.facetsExcludes[attributeName].forEach(function(name) {\n      res.push(getRefinement(state, 'exclude', attributeName, name, results.facets));\n    });\n  });\n\n  Object.keys(state.disjunctiveFacetsRefinements).forEach(function(attributeName) {\n    state.disjunctiveFacetsRefinements[attributeName].forEach(function(name) {\n      res.push(getRefinement(state, 'disjunctive', attributeName, name, results.disjunctiveFacets));\n    });\n  });\n\n  Object.keys(state.hierarchicalFacetsRefinements).forEach(function(attributeName) {\n    state.hierarchicalFacetsRefinements[attributeName].forEach(function(name) {\n      res.push(getHierarchicalRefinement(state, attributeName, name, results.hierarchicalFacets));\n    });\n  });\n\n\n  Object.keys(state.numericRefinements).forEach(function(attributeName) {\n    var operators = state.numericRefinements[attributeName];\n    Object.keys(operators).forEach(function(operator) {\n      operators[operator].forEach(function(value) {\n        res.push({\n          type: 'numeric',\n          attributeName: attributeName,\n          name: value,\n          numericValue: value,\n          operator: operator\n        });\n      });\n    });\n  });\n\n  state.tagRefinements.forEach(function(name) {\n    res.push({type: 'tag', attributeName: '_tags', name: name});\n  });\n\n  return res;\n};\n\n/**\n * @typedef {Object} Facet\n * @property {string} name\n * @property {Object} data\n * @property {boolean} exhaustive\n */\n\n/**\n * @param {*} state\n * @param {*} type\n * @param {string} attributeName\n * @param {*} name\n * @param {Facet[]} resultsFacets\n */\nfunction getRefinement(state, type, attributeName, name, resultsFacets) {\n  var facet = find(resultsFacets, function(f) {\n    return f.name === attributeName;\n  });\n  var count = facet && facet.data && facet.data[name] ? facet.data[name] : 0;\n  var exhaustive = (facet && facet.exhaustive) || false;\n\n  return {\n    type: type,\n    attributeName: attributeName,\n    name: name,\n    count: count,\n    exhaustive: exhaustive\n  };\n}\n\n/**\n * @param {*} state\n * @param {string} attributeName\n * @param {*} name\n * @param {Facet[]} resultsFacets\n */\nfunction getHierarchicalRefinement(state, attributeName, name, resultsFacets) {\n  var facetDeclaration = state.getHierarchicalFacetByName(attributeName);\n  var separator = state._getHierarchicalFacetSeparator(facetDeclaration);\n  var split = name.split(separator);\n  var rootFacet = find(resultsFacets, function(facet) {\n    return facet.name === attributeName;\n  });\n\n  var facet = split.reduce(function(intermediateFacet, part) {\n    var newFacet =\n      intermediateFacet && find(intermediateFacet.data, function(f) {\n        return f.name === part;\n      });\n    return newFacet !== undefined ? newFacet : intermediateFacet;\n  }, rootFacet);\n\n  var count = (facet && facet.count) || 0;\n  var exhaustive = (facet && facet.exhaustive) || false;\n  var path = (facet && facet.path) || '';\n\n  return {\n    type: 'hierarchical',\n    attributeName: attributeName,\n    name: path,\n    count: count,\n    exhaustive: exhaustive\n  };\n}\n\nmodule.exports = SearchResults;\n"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,oBAAD,CAAnB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,2BAAD,CAA1B;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAII,IAAI,GAAGJ,OAAO,CAAC,mBAAD,CAAlB;;AACA,IAAIK,SAAS,GAAGL,OAAO,CAAC,wBAAD,CAAvB;;AACA,IAAIM,UAAU,GAAGN,OAAO,CAAC,yBAAD,CAAxB;;AACA,IAAIO,EAAE,GAAGP,OAAO,CAAC,+BAAD,CAAhB;;AACA,IAAIQ,gBAAgB,GAAGD,EAAE,CAACC,gBAA1B;AACA,IAAIC,kBAAkB,GAAGF,EAAE,CAACE,kBAA5B;;AAEA,IAAIC,wBAAwB,GAAGV,OAAO,CAAC,8BAAD,CAAtC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,SAASW,UAAT,CAAoBC,UAApB,EAAgC;EAC9B,IAAIC,OAAO,GAAG,EAAd;EAEAD,UAAU,CAACE,OAAX,CAAmB,UAASC,GAAT,EAAcC,GAAd,EAAmB;IACpCH,OAAO,CAACE,GAAD,CAAP,GAAeC,GAAf;EACD,CAFD;EAIA,OAAOH,OAAP;AACD;;AAED,SAASI,gBAAT,CAA0BC,IAA1B,EAAgCC,UAAhC,EAA4CC,GAA5C,EAAiD;EAC/C,IAAID,UAAU,IAAIA,UAAU,CAACC,GAAD,CAA5B,EAAmC;IACjCF,IAAI,CAACG,KAAL,GAAaF,UAAU,CAACC,GAAD,CAAvB;EACD;AACF;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACA,SAASE,8CAAT,CACEC,kBADF,EAEEC,yBAFF,EAGE;EACA,OAAOpB,IAAI,CAACmB,kBAAD,EAAqB,SAASE,wBAAT,CAC9BC,iBAD8B,EAE9B;IACA,IAAIC,UAAU,GAAGD,iBAAiB,CAACd,UAAlB,IAAgC,EAAjD;IACA,OAAOe,UAAU,CAACC,OAAX,CAAmBJ,yBAAnB,IAAgD,CAAC,CAAxD;EACD,CALU,CAAX;AAMD;AAED;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,SAASK,aAAT,CAAuBC,KAAvB,EAA8BC,OAA9B,EAAuCC,OAAvC,EAAgD;EAC9C,IAAIC,eAAe,GAAGF,OAAO,CAAC,CAAD,CAA7B;EAEA,KAAKG,WAAL,GAAmBH,OAAnB;EAEA,IAAII,IAAI,GAAG,IAAX,CAL8C,CAO9C;;EACAC,MAAM,CAACC,IAAP,CAAYJ,eAAZ,EAA6BnB,OAA7B,CAAqC,UAASM,GAAT,EAAc;IACjDe,IAAI,CAACf,GAAD,CAAJ,GAAYa,eAAe,CAACb,GAAD,CAA3B;EACD,CAFD,EAR8C,CAY9C;;EACAgB,MAAM,CAACC,IAAP,CAAYL,OAAO,IAAI,EAAvB,EAA2BlB,OAA3B,CAAmC,UAASM,GAAT,EAAc;IAC/Ce,IAAI,CAACf,GAAD,CAAJ,GAAYY,OAAO,CAACZ,GAAD,CAAnB;EACD,CAFD;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;;EACE;AACF;AACA;AACA;AACA;AACA;AACA;;EACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;AACF;AACA;AACA;AACA;AACA;AACA;;EACE;AACF;AACA;AACA;AACA;AACA;AACA;;EACE;AACF;AACA;AACA;AACA;AACA;AACA;;EACE;AACF;AACA;AACA;AACA;AACA;AACA;;EACE;AACF;AACA;AACA;AACA;AACA;AACA;;EACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;AACF;AACA;AACA;AACA;AACA;AACA;;EACE;AACF;AACA;AACA;AACA;AACA;AACA;;EACE;AACF;AACA;AACA;AACA;AACA;AACA;;EACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;;EACE,KAAKkB,gBAAL,GAAwBP,OAAO,CAACQ,MAAR,CAAe,UAASC,GAAT,EAAcC,MAAd,EAAsB;IAC3D,OAAOA,MAAM,CAACH,gBAAP,KAA4BI,SAA5B,GACHF,GADG,GAEHA,GAAG,GAAGC,MAAM,CAACH,gBAFjB;EAGD,CAJuB,EAIrB,CAJqB,CAAxB;EAMA;AACF;AACA;AACA;;EACE,KAAKK,iBAAL,GAAyB,EAAzB;EACA;AACF;AACA;AACA;;EACE,KAAKpB,kBAAL,GAA0BO,KAAK,CAACP,kBAAN,CAAyBqB,GAAzB,CAA6B,SAASC,cAAT,GAA0B;IAC/E,OAAO,EAAP;EACD,CAFyB,CAA1B;EAGA;AACF;AACA;AACA;;EACE,KAAKC,MAAL,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"},"metadata":{},"sourceType":"script"}