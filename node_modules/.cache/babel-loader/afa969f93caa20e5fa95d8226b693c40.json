{"ast":null,"code":"'use strict';\n\nvar find = require('./find');\n/**\n * Transform sort format from user friendly notation to lodash format\n * @param {string[]} sortBy array of predicate of the form \"attribute:order\"\n * @param {string[]} [defaults] array of predicate of the form \"attribute:order\"\n * @return {array.<string[]>} array containing 2 elements : attributes, orders\n */\n\n\nmodule.exports = function formatSort(sortBy, defaults) {\n  var defaultInstructions = (defaults || []).map(function (sort) {\n    return sort.split(':');\n  });\n  return sortBy.reduce(function preparePredicate(out, sort) {\n    var sortInstruction = sort.split(':');\n    var matchingDefault = find(defaultInstructions, function (defaultInstruction) {\n      return defaultInstruction[0] === sortInstruction[0];\n    });\n\n    if (sortInstruction.length > 1 || !matchingDefault) {\n      out[0].push(sortInstruction[0]);\n      out[1].push(sortInstruction[1]);\n      return out;\n    }\n\n    out[0].push(matchingDefault[0]);\n    out[1].push(matchingDefault[1]);\n    return out;\n  }, [[], []]);\n};","map":{"version":3,"names":["find","require","module","exports","formatSort","sortBy","defaults","defaultInstructions","map","sort","split","reduce","preparePredicate","out","sortInstruction","matchingDefault","defaultInstruction","length","push"],"sources":["/home/dedm/Documents/sript/lab3-script/node_modules/algoliasearch-helper/src/functions/formatSort.js"],"sourcesContent":["'use strict';\n\nvar find = require('./find');\n\n/**\n * Transform sort format from user friendly notation to lodash format\n * @param {string[]} sortBy array of predicate of the form \"attribute:order\"\n * @param {string[]} [defaults] array of predicate of the form \"attribute:order\"\n * @return {array.<string[]>} array containing 2 elements : attributes, orders\n */\nmodule.exports = function formatSort(sortBy, defaults) {\n  var defaultInstructions = (defaults || []).map(function(sort) {\n    return sort.split(':');\n  });\n\n  return sortBy.reduce(\n    function preparePredicate(out, sort) {\n      var sortInstruction = sort.split(':');\n\n      var matchingDefault = find(defaultInstructions, function(\n        defaultInstruction\n      ) {\n        return defaultInstruction[0] === sortInstruction[0];\n      });\n\n      if (sortInstruction.length > 1 || !matchingDefault) {\n        out[0].push(sortInstruction[0]);\n        out[1].push(sortInstruction[1]);\n        return out;\n      }\n\n      out[0].push(matchingDefault[0]);\n      out[1].push(matchingDefault[1]);\n      return out;\n    },\n    [[], []]\n  );\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,QAA5B,EAAsC;EACrD,IAAIC,mBAAmB,GAAG,CAACD,QAAQ,IAAI,EAAb,EAAiBE,GAAjB,CAAqB,UAASC,IAAT,EAAe;IAC5D,OAAOA,IAAI,CAACC,KAAL,CAAW,GAAX,CAAP;EACD,CAFyB,CAA1B;EAIA,OAAOL,MAAM,CAACM,MAAP,CACL,SAASC,gBAAT,CAA0BC,GAA1B,EAA+BJ,IAA/B,EAAqC;IACnC,IAAIK,eAAe,GAAGL,IAAI,CAACC,KAAL,CAAW,GAAX,CAAtB;IAEA,IAAIK,eAAe,GAAGf,IAAI,CAACO,mBAAD,EAAsB,UAC9CS,kBAD8C,EAE9C;MACA,OAAOA,kBAAkB,CAAC,CAAD,CAAlB,KAA0BF,eAAe,CAAC,CAAD,CAAhD;IACD,CAJyB,CAA1B;;IAMA,IAAIA,eAAe,CAACG,MAAhB,GAAyB,CAAzB,IAA8B,CAACF,eAAnC,EAAoD;MAClDF,GAAG,CAAC,CAAD,CAAH,CAAOK,IAAP,CAAYJ,eAAe,CAAC,CAAD,CAA3B;MACAD,GAAG,CAAC,CAAD,CAAH,CAAOK,IAAP,CAAYJ,eAAe,CAAC,CAAD,CAA3B;MACA,OAAOD,GAAP;IACD;;IAEDA,GAAG,CAAC,CAAD,CAAH,CAAOK,IAAP,CAAYH,eAAe,CAAC,CAAD,CAA3B;IACAF,GAAG,CAAC,CAAD,CAAH,CAAOK,IAAP,CAAYH,eAAe,CAAC,CAAD,CAA3B;IACA,OAAOF,GAAP;EACD,CAnBI,EAoBL,CAAC,EAAD,EAAK,EAAL,CApBK,CAAP;AAsBD,CA3BD"},"metadata":{},"sourceType":"script"}