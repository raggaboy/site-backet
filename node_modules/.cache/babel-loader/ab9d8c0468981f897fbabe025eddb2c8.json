{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport createConnector from \"../core/createConnector.js\";\nimport { getResults } from \"../core/indexUtils.js\";\n\nfunction inferPayload(_ref) {\n  var method = _ref.method,\n      results = _ref.results,\n      currentHit = _ref.currentHit;\n  var index = results.index;\n  var queryID = currentHit.__queryID;\n  var objectIDs = [currentHit.objectID];\n\n  if (!queryID) {\n    throw new Error(\"Could not infer `queryID`. Ensure `clickAnalytics: true` was added with the Configure widget.\\nSee: https://alg.li/VpPpLt\");\n  }\n\n  switch (method) {\n    case 'clickedObjectIDsAfterSearch':\n      {\n        var positions = [currentHit.__position];\n        return {\n          index: index,\n          queryID: queryID,\n          objectIDs: objectIDs,\n          positions: positions\n        };\n      }\n\n    case 'convertedObjectIDsAfterSearch':\n      return {\n        index: index,\n        queryID: queryID,\n        objectIDs: objectIDs\n      };\n\n    default:\n      throw new Error(\"Unsupported method \\\"\".concat(method, \"\\\" passed to the insights function. The supported methods are: \\\"clickedObjectIDsAfterSearch\\\", \\\"convertedObjectIDsAfterSearch\\\".\"));\n  }\n}\n\nvar wrapInsightsClient = function wrapInsightsClient(aa, results, currentHit) {\n  return function (method, payload) {\n    if (typeof aa !== 'function') {\n      throw new TypeError(\"Expected insightsClient to be a Function\");\n    }\n\n    var inferredPayload = inferPayload({\n      method: method,\n      results: results,\n      currentHit: currentHit\n    });\n    aa(method, _objectSpread(_objectSpread({}, inferredPayload), payload));\n  };\n};\n\nexport default (function (insightsClient) {\n  return createConnector({\n    displayName: 'AlgoliaInsights',\n    $$type: 'ais.insights',\n    getProvidedProps: function getProvidedProps(props, _, searchResults) {\n      var results = getResults(searchResults, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      });\n      var insights = wrapInsightsClient(insightsClient, results, props.hit);\n      return {\n        insights: insights\n      };\n    }\n  });\n});","map":{"version":3,"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","createConnector","getResults","inferPayload","_ref","method","results","currentHit","index","queryID","__queryID","objectIDs","objectID","Error","positions","__position","concat","wrapInsightsClient","aa","payload","TypeError","inferredPayload","insightsClient","displayName","$$type","getProvidedProps","props","_","searchResults","ais","contextValue","multiIndexContext","indexContextValue","insights","hit"],"sources":["/home/dedm/Documents/sript/lab3-script/node_modules/react-instantsearch-core/dist/es/connectors/connectHitInsights.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport createConnector from \"../core/createConnector.js\";\nimport { getResults } from \"../core/indexUtils.js\";\n\nfunction inferPayload(_ref) {\n  var method = _ref.method,\n      results = _ref.results,\n      currentHit = _ref.currentHit;\n  var index = results.index;\n  var queryID = currentHit.__queryID;\n  var objectIDs = [currentHit.objectID];\n\n  if (!queryID) {\n    throw new Error(\"Could not infer `queryID`. Ensure `clickAnalytics: true` was added with the Configure widget.\\nSee: https://alg.li/VpPpLt\");\n  }\n\n  switch (method) {\n    case 'clickedObjectIDsAfterSearch':\n      {\n        var positions = [currentHit.__position];\n        return {\n          index: index,\n          queryID: queryID,\n          objectIDs: objectIDs,\n          positions: positions\n        };\n      }\n\n    case 'convertedObjectIDsAfterSearch':\n      return {\n        index: index,\n        queryID: queryID,\n        objectIDs: objectIDs\n      };\n\n    default:\n      throw new Error(\"Unsupported method \\\"\".concat(method, \"\\\" passed to the insights function. The supported methods are: \\\"clickedObjectIDsAfterSearch\\\", \\\"convertedObjectIDsAfterSearch\\\".\"));\n  }\n}\n\nvar wrapInsightsClient = function wrapInsightsClient(aa, results, currentHit) {\n  return function (method, payload) {\n    if (typeof aa !== 'function') {\n      throw new TypeError(\"Expected insightsClient to be a Function\");\n    }\n\n    var inferredPayload = inferPayload({\n      method: method,\n      results: results,\n      currentHit: currentHit\n    });\n    aa(method, _objectSpread(_objectSpread({}, inferredPayload), payload));\n  };\n};\n\nexport default (function (insightsClient) {\n  return createConnector({\n    displayName: 'AlgoliaInsights',\n    $$type: 'ais.insights',\n    getProvidedProps: function getProvidedProps(props, _, searchResults) {\n      var results = getResults(searchResults, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      });\n      var insights = wrapInsightsClient(insightsClient, results, props.hit);\n      return {\n        insights: insights\n      };\n    }\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}